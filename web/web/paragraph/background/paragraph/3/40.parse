(ROOT
  (S
    (NP (PRP You))
    (VP (MD may)
      (VP (VB have)
        (VP
          (VP (VBN heard)
            (PP (IN of)))
          (CC or)
          (VP (VBN been)
            (PP (TO to)
              (NP
                (NP (VBG rotating) (NNS observatories))
                (VP (VBN situated)
                  (PP (IN at)
                    (NP
                      (NP (DT the) (JJ topmost) (NN level))
                      (PP (IN of)
                        (NP (JJ high-rise) (NNS buildings))))))))
            (SBAR
              (WHADVP (WRB where))
              (S
                (NP (PRP you))
                (VP (MD can)
                  (VP (VB enjoy)
                    (NP (DT a) (JJ 3-degree) (JJ panoramic) (NN view))))))))))
    (. .)))

nsubj(heard-4, You-1)
aux(heard-4, may-2)
aux(heard-4, have-3)
root(ROOT-0, heard-4)
nmod(heard-4, of-5)
cc(heard-4, or-6)
cop(observatories-10, been-7)
case(observatories-10, to-8)
amod(observatories-10, rotating-9)
conj:or(heard-4, observatories-10)
acl(observatories-10, situated-11)
case(level-15, at-12)
det(level-15, the-13)
amod(level-15, topmost-14)
nmod:at(situated-11, level-15)
case(buildings-18, of-16)
amod(buildings-18, high-rise-17)
nmod:of(level-15, buildings-18)
advmod(enjoy-22, where-19)
nsubj(enjoy-22, you-20)
aux(enjoy-22, can-21)
advcl(observatories-10, enjoy-22)
det(view-26, a-23)
amod(view-26, 3-degree-24)
amod(view-26, panoramic-25)
dobj(enjoy-22, view-26)

(ROOT
  (SBARQ (CC But)
    (SQ (VBP have)
      (NP (PRP you))
      (VP
        (ADVP (RB ever))
        (VBN imagined)
        (NP (DT a) (NN building))
        (PP (IN with)
          (NP
            (NP (VBG rotating) (NNS floors))
            (PP (IN from)
              (NP
                (NP (NN top))
                (PP (TO to)
                  (NP (NN bottom)))))))))
    (. ?)))

cc(imagined-5, But-1)
aux(imagined-5, have-2)
nsubj(imagined-5, you-3)
advmod(imagined-5, ever-4)
root(ROOT-0, imagined-5)
det(building-7, a-6)
dobj(imagined-5, building-7)
case(floors-10, with-8)
amod(floors-10, rotating-9)
nmod:with(imagined-5, floors-10)
case(top-12, from-11)
nmod:from(floors-10, top-12)
case(bottom-14, to-13)
nmod:to(top-12, bottom-14)

(ROOT
  (S
    (S
      (VP (VBG Living)
        (PP (IN on)
          (NP
            (NP (DT any) (NN level))
            (PP (IN of)
              (NP (DT the) (NN building)))))))
    (, ,)
    (NP (PRP you))
    (VP (MD could)
      (VP
        (VP (VB indulge)
          (PP (IN in)
            (NP (NN breakfast)))
          (SBAR (IN while)
            (S
              (VP (VBG enjoying)
                (NP (DT the) (JJ astonishing) (NN mountain) (NN view))))))
        (CC and)
        (VP (VB have)
          (NP (NN dinner))
          (PP (IN while)
            (S
              (VP (VBG admiring)
                (NP (DT the) (JJ vast) (NN ocean))))))))
    (. .)))

advcl(indulge-11, Living-1)
case(level-4, on-2)
det(level-4, any-3)
nmod:on(Living-1, level-4)
case(building-7, of-5)
det(building-7, the-6)
nmod:of(level-4, building-7)
nsubj(indulge-11, you-9)
nsubj(have-21, you-9)
aux(indulge-11, could-10)
root(ROOT-0, indulge-11)
case(breakfast-13, in-12)
nmod:in(indulge-11, breakfast-13)
mark(enjoying-15, while-14)
advcl(indulge-11, enjoying-15)
det(view-19, the-16)
amod(view-19, astonishing-17)
compound(view-19, mountain-18)
dobj(enjoying-15, view-19)
cc(indulge-11, and-20)
conj:and(indulge-11, have-21)
dobj(have-21, dinner-22)
mark(admiring-24, while-23)
advcl(have-21, admiring-24)
det(ocean-27, the-25)
amod(ocean-27, vast-26)
dobj(admiring-24, ocean-27)

(ROOT
  (S
    (NP (PRP You))
    (VP (MD would)
      (ADVP (RB no) (RB longer))
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB wake)
              (PRT (RP up))
              (NP (DT each) (NN day))
              (PP (TO to)
                (NP
                  (NP (DT the) (JJ exact) (JJ same) (NN view))
                  (PP (IN outside)
                    (NP (PRP$ your) (NN apartment) (NN window))))))))))
    (. .)))

nsubj(have-5, You-1)
nsubj(wake-7, You-1)
aux(have-5, would-2)
neg(longer-4, no-3)
advmod(have-5, longer-4)
root(ROOT-0, have-5)
mark(wake-7, to-6)
xcomp(have-5, wake-7)
compound:prt(wake-7, up-8)
det(day-10, each-9)
nmod:tmod(wake-7, day-10)
case(view-15, to-11)
det(view-15, the-12)
amod(view-15, exact-13)
amod(view-15, same-14)
nmod:to(wake-7, view-15)
case(window-19, outside-16)
nmod:poss(window-19, your-17)
compound(window-19, apartment-18)
nmod:outside(view-15, window-19)

(ROOT
  (S
    (S
      (NP (DT This) (NN fantasy))
      (VP (MD may)
        (VP (VB be)
          (VP (VBN transformed)
            (PP (IN into)
              (NP (NN reality)))
            (PP (IN by)
              (NP (DT the) (VBN proposed) (NNP Dynamic) (NNP Tower)))))))
    (, ,)
    (NP (DT the) (NN world))
    (VP (VBZ 's)
      (ADVP (RB first))
      (`` ``)
      (VP (VBG building)
        (PP (IN in)
          (NP (NN motion)))))
    (. .) ('' '')))

det(fantasy-2, This-1)
nsubjpass(transformed-5, fantasy-2)
aux(transformed-5, may-3)
auxpass(transformed-5, be-4)
ccomp(building-19, transformed-5)
case(reality-7, into-6)
nmod:into(transformed-5, reality-7)
case(Tower-12, by-8)
det(Tower-12, the-9)
amod(Tower-12, proposed-10)
compound(Tower-12, Dynamic-11)
nmod:by(transformed-5, Tower-12)
det(world-15, the-14)
nsubj(building-19, world-15)
aux(building-19, 's-16)
advmod(building-19, first-17)
root(ROOT-0, building-19)
case(motion-21, in-20)
nmod:in(building-19, motion-21)

(ROOT
  (S
    (NP
      (NP (DT A) (NN brainchild))
      (PP (IN of)
        (NP
          (NP (DT the) (JJ Italian) (NN architect) (NNP David) (NNP Fisher))
          (, ,)
          (NP (DT this) (VBG rotating) (NN tower)))))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN built)
          (PP (IN in)
            (NP
              (NP (NNP Dubai))
              (, ,)
              (NP
                (NP (DT a) (NN city-state))
                (PP (IN of)
                  (NP (DT the) (NNP United) (NNP Arab) (NNPS Emirates)))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ boasts)
                      (NP (JJ many) (JJ ambitious) (NNS projects)))))))))))
    (. .)))

det(brainchild-2, A-1)
nsubjpass(built-15, brainchild-2)
case(Fisher-8, of-3)
det(Fisher-8, the-4)
amod(Fisher-8, Italian-5)
compound(Fisher-8, architect-6)
compound(Fisher-8, David-7)
nmod:of(brainchild-2, Fisher-8)
det(tower-12, this-10)
amod(tower-12, rotating-11)
appos(Fisher-8, tower-12)
aux(built-15, will-13)
auxpass(built-15, be-14)
root(ROOT-0, built-15)
case(Dubai-17, in-16)
nmod:in(built-15, Dubai-17)
det(city-state-20, a-19)
appos(Dubai-17, city-state-20)
nsubj(boasts-27, city-state-20)
case(Emirates-25, of-21)
det(Emirates-25, the-22)
compound(Emirates-25, United-23)
compound(Emirates-25, Arab-24)
nmod:of(city-state-20, Emirates-25)
ref(city-state-20, that-26)
acl:relcl(city-state-20, boasts-27)
amod(projects-30, many-28)
amod(projects-30, ambitious-29)
dobj(boasts-27, projects-30)

(ROOT
  (S
    (SBAR (IN As)
      (S
        (VP (VBZ is)
          (VP (VBN expected)))))
    (, ,)
    (NP
      (NP (NNP Fisher) (POS 's))
      (JJ progressive) (NN design) (NN concept))
    (VP (MD will)
      (VP (VB attract)
        (NP (NN attention))
        (PP (IN from)
          (NP
            (NP (DT all))
            (PP (IN over)
              (NP (DT the) (NN world)))))))
    (. .)))

mark(expected-3, As-1)
auxpass(expected-3, is-2)
advcl(attract-11, expected-3)
nmod:poss(concept-9, Fisher-5)
case(Fisher-5, 's-6)
amod(concept-9, progressive-7)
compound(concept-9, design-8)
nsubj(attract-11, concept-9)
aux(attract-11, will-10)
root(ROOT-0, attract-11)
dobj(attract-11, attention-12)
case(all-14, from-13)
nmod:from(attract-11, all-14)
case(world-17, over-15)
det(world-17, the-16)
nmod:over(all-14, world-17)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is) (, ,)
      (ADVP (IN after) (DT all))
      (, ,)
      (NP
        (NP (DT a)
          (ADJP (RB totally) (JJ new)))
        (CC and)
        (NP (JJ original) (NN idea))))
    (. .)))

nsubj(new-9, It-1)
cop(new-9, is-2)
case(all-5, after-4)
advmod(new-9, all-5)
det(new-9, a-7)
advmod(new-9, totally-8)
root(ROOT-0, new-9)
cc(new-9, and-10)
amod(idea-12, original-11)
conj:and(new-9, idea-12)

(ROOT
  (S
    (NP
      (NP (JJ Magnificent) (NNS buildings))
      (PP (IN around)
        (NP (DT the) (NN world))))
    (VP (VBP have)
      (VP (VBN made)
        (NP (JJ everlasting) (NNS impressions))
        (PP (IN on)
          (NP
            (NP (NNS people))
            (PP (IN with)
              (NP (PRP$ their) (JJ strikingly) (JJ original) (NNS shapes)
                (CC and)
                (NNS styles)))))))
    (. .)))

amod(buildings-2, Magnificent-1)
nsubj(made-7, buildings-2)
case(world-5, around-3)
det(world-5, the-4)
nmod:around(buildings-2, world-5)
aux(made-7, have-6)
root(ROOT-0, made-7)
amod(impressions-9, everlasting-8)
dobj(made-7, impressions-9)
case(people-11, on-10)
nmod:on(made-7, people-11)
case(shapes-16, with-12)
nmod:poss(shapes-16, their-13)
amod(shapes-16, strikingly-14)
amod(shapes-16, original-15)
nmod:with(people-11, shapes-16)
cc(shapes-16, and-17)
nmod:with(people-11, styles-18)
conj:and(shapes-16, styles-18)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (ADVP (RB now))
    (NP
      (NP (RB even) (DT the) (JJ traditional) (NN concept))
      (PP (IN of)
        (NP (DT the) (`` ``) (JJ static) ('' '') (NN building))))
    (VP (VBZ is)
      (VP (VBG being)
        (VP
          (ADVP (RB dramatically))
          (VBN challenged))))
    (. .)))

advmod(challenged-17, However-1)
advmod(challenged-17, now-3)
advmod(concept-7, even-4)
det(concept-7, the-5)
amod(concept-7, traditional-6)
nsubjpass(challenged-17, concept-7)
case(building-13, of-8)
det(building-13, the-9)
amod(building-13, static-11)
nmod:of(concept-7, building-13)
aux(challenged-17, is-14)
auxpass(challenged-17, being-15)
advmod(challenged-17, dramatically-16)
root(ROOT-0, challenged-17)

(ROOT
  (S
    (NP (DT The) (NNP Dynamic) (NNP Tower))
    (VP (VBZ is)
      (ADJP (JJ unique)
        (PP (IN in)
          (SBAR (IN that)
            (S
              (NP (PRP it))
              (VP (VBZ is) (, ,)
                (PP (IN in)
                  (NP
                    (NP (NNP Fisher) (POS 's))
                    (NNS words)))
                (, ,)
                (SBAR (`` ``)
                  (S
                    (S
                      (VP (VBN designed)
                        (PP (IN by)
                          (NP (NN life)))))
                    (, ,)
                    (S
                      (VP (VBN shaped)
                        (PP (IN by)
                          (NP (NN time)))))))))))))
    (. .) ('' '')))

det(Tower-3, The-1)
compound(Tower-3, Dynamic-2)
nsubj(unique-5, Tower-3)
cop(unique-5, is-4)
root(ROOT-0, unique-5)
mark(words-14, in-6)
mark(words-14, that-7)
nsubj(words-14, it-8)
cop(words-14, is-9)
case(words-14, in-11)
nmod:poss(words-14, Fisher-12)
case(Fisher-12, 's-13)
advcl:in(unique-5, words-14)
dep(words-14, designed-17)
case(life-19, by-18)
nmod:by(designed-17, life-19)
parataxis(designed-17, shaped-21)
case(time-23, by-22)
nmod:by(shaped-21, time-23)

(ROOT
  (S
    (S
      (NP (DT That))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB say))))))
    (, ,)
    (S
      (PP (IN unlike)
        (NP (DT any) (NNS buildings)))
      (NP (PRP we))
      (VP (VBP have)
        (ADVP (RB ever))
        (VP (VBN known))))
    (, ,)
    (S
      (NP (PRP it))
      (VP (MD will)
        (ADVP (RB continually))
        (VP (VB change)
          (NP (PRP$ its) (NN shape))
          (PP (IN as)
            (NP (NN time) (NNS passes))))))
    (. .)))

nsubj(is-2, That-1)
nsubj(say-4, That-1)
root(ROOT-0, is-2)
mark(say-4, to-3)
xcomp(is-2, say-4)
case(buildings-8, unlike-6)
det(buildings-8, any-7)
nmod:unlike(known-12, buildings-8)
nsubj(known-12, we-9)
aux(known-12, have-10)
advmod(known-12, ever-11)
parataxis(is-2, known-12)
nsubj(change-17, it-14)
aux(change-17, will-15)
advmod(change-17, continually-16)
parataxis(is-2, change-17)
nmod:poss(shape-19, its-18)
dobj(change-17, shape-19)
case(passes-22, as-20)
compound(passes-22, time-21)
nmod:as(change-17, passes-22)

(ROOT
  (S
    (S
      (VP (VBN Seen)
        (PP (IN from)
          (NP (DT the) (NN exterior)))))
    (, ,)
    (NP (DT the) (NN building))
    (VP (MD will)
      (VP (VB transform)
        (PP (IN into)
          (NP
            (NP (DT a) (NN series))
            (PP (IN of)
              (NP (JJ artistic) (NNS forms)))))
        (SBAR (IN as)
          (S
            (NP (PRP it))
            (VP (VBZ rotates))))))
    (. .)))

advcl(transform-9, Seen-1)
case(exterior-4, from-2)
det(exterior-4, the-3)
nmod:from(Seen-1, exterior-4)
det(building-7, the-6)
nsubj(transform-9, building-7)
aux(transform-9, will-8)
root(ROOT-0, transform-9)
case(series-12, into-10)
det(series-12, a-11)
nmod:into(transform-9, series-12)
case(forms-15, of-13)
amod(forms-15, artistic-14)
nmod:of(series-12, forms-15)
mark(rotates-18, as-16)
nsubj(rotates-18, it-17)
advcl(transform-9, rotates-18)

(ROOT
  (S
    (S
      (PP (IN At)
        (NP (DT some) (NNS moments)))
      (NP (PRP it))
      (VP (MD may)
        (VP (VB resemble)
          (NP
            (NP (DT a) (JJ twisted) (NN strand))
            (PP (IN of)
              (NP (NNP DNA)))))))
    (: ;)
    (S
      (PP (IN at)
        (NP (JJ other) (NNS times)))
      (NP (PRP it))
      (VP (MD may)
        (VP (VB look)
          (PP (IN like)
            (NP
              (NP (DT a) (NN ballerina))
              (VP (VBG doing)
                (NP
                  (NP (DT a) (NN pirouette))
                  (PP (IN in)
                    (NP (JJ slow) (NN motion))))))))))
    (. .)))

case(moments-3, At-1)
det(moments-3, some-2)
nmod:at(resemble-6, moments-3)
nsubj(resemble-6, it-4)
aux(resemble-6, may-5)
root(ROOT-0, resemble-6)
det(strand-9, a-7)
amod(strand-9, twisted-8)
xcomp(resemble-6, strand-9)
case(DNA-11, of-10)
nmod:of(strand-9, DNA-11)
case(times-15, at-13)
amod(times-15, other-14)
nmod:at(look-18, times-15)
nsubj(look-18, it-16)
aux(look-18, may-17)
parataxis(resemble-6, look-18)
case(ballerina-21, like-19)
det(ballerina-21, a-20)
nmod:like(look-18, ballerina-21)
acl(ballerina-21, doing-22)
det(pirouette-24, a-23)
dobj(doing-22, pirouette-24)
case(motion-27, in-25)
amod(motion-27, slow-26)
nmod:in(pirouette-24, motion-27)

(ROOT
  (S
    (NP (DT The) (NNS possibilities))
    (VP (VBP are)
      (ADJP (JJ endless)))
    (. .)))

det(possibilities-2, The-1)
nsubj(endless-4, possibilities-2)
cop(endless-4, are-3)
root(ROOT-0, endless-4)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP
          (NP (DT each) (NN floor))
          (PP (IN of)
            (NP (DT the) (NN building))))
        (VP (MD will)
          (VP
            (VP (VB act)
              (PP (IN as)
                (NP (DT an) (JJ individual) (NN component))))
            (CC and)
            (ADVP (RB thus))
            (VP (VB be)
              (ADJP (JJ capable)
                (PP (IN of)
                  (NP (VBG rotating))))
              (ADVP (RB independently)))))))
    (, ,)
    (NP (PRP$ your) (NN upstairs)
      (CC and)
      (NNS downstairs) (NNS neighbors))
    (VP (MD may)
      (VP (VB see)
        (NP (JJ different) (NNS views))
        (PP (IN from)
          (NP
            (NP (DT the) (NN one))
            (SBAR
              (S
                (NP (PRP you))
                (VP (VBP see))))))))
    (. .)))

mark(act-8, Since-1)
det(floor-3, each-2)
nsubj(act-8, floor-3)
nsubj(capable-16, floor-3)
case(building-6, of-4)
det(building-6, the-5)
nmod:of(floor-3, building-6)
aux(act-8, will-7)
advcl(see-27, act-8)
case(component-12, as-9)
det(component-12, an-10)
amod(component-12, individual-11)
nmod:as(act-8, component-12)
cc(act-8, and-13)
advmod(capable-16, thus-14)
cop(capable-16, be-15)
conj:and(act-8, capable-16)
advcl(see-27, capable-16)
case(rotating-18, of-17)
nmod:of(capable-16, rotating-18)
advmod(capable-16, independently-19)
nmod:poss(upstairs-22, your-21)
nsubj(see-27, upstairs-22)
cc(upstairs-22, and-23)
compound(neighbors-25, downstairs-24)
conj:and(upstairs-22, neighbors-25)
nsubj(see-27, neighbors-25)
aux(see-27, may-26)
root(ROOT-0, see-27)
amod(views-29, different-28)
dobj(see-27, views-29)
case(one-32, from-30)
det(one-32, the-31)
nmod:from(see-27, one-32)
nsubj(see-34, you-33)
acl:relcl(one-32, see-34)

(ROOT
  (S
    (SBAR (IN While)
      (S
        (NP (JJS most) (NNS floors))
        (VP (MD will)
          (VP (VB revolve)
            (PP (IN at)
              (NP
                (NP (DT a) (NN pace))
                (VP (VBN controlled)
                  (PP (IN by)
                    (NP (DT a) (JJ central) (NN computer) (NN system))))))))))
    (, ,)
    (NP
      (NP (NNS people))
      (SBAR
        (WHNP (WP who))
        (S
          (VP (MD can)
            (VP (VB afford)
              (NP (NNS villas))
              (PP (IN on)
                (NP (DT the) (JJ top) (NNS floors))))))))
    (VP (MD will)
      (VP (VB have)
        (NP
          (NP (DT the) (JJ extra) (NN luxury))
          (PP (IN of)
            (S
              (VP (VBG rotating)
                (NP (PRP$ their) (NNS apartments))
                (PP (IN at)
                  (NP
                    (NP (NN will))
                    (PP (IN with)
                      (NP (DT a) (JJ voice-activated) (NN control) (NN device)))))))))))
    (. .)))

mark(revolve-5, While-1)
amod(floors-3, most-2)
nsubj(revolve-5, floors-3)
aux(revolve-5, will-4)
advcl(have-26, revolve-5)
case(pace-8, at-6)
det(pace-8, a-7)
nmod:at(revolve-5, pace-8)
acl(pace-8, controlled-9)
case(system-14, by-10)
det(system-14, a-11)
amod(system-14, central-12)
compound(system-14, computer-13)
nmod:by(controlled-9, system-14)
nsubj(afford-19, people-16)
nsubj(have-26, people-16)
ref(people-16, who-17)
aux(afford-19, can-18)
acl:relcl(people-16, afford-19)
dobj(afford-19, villas-20)
case(floors-24, on-21)
det(floors-24, the-22)
amod(floors-24, top-23)
nmod:on(afford-19, floors-24)
aux(have-26, will-25)
root(ROOT-0, have-26)
det(luxury-29, the-27)
amod(luxury-29, extra-28)
dobj(have-26, luxury-29)
mark(rotating-31, of-30)
acl(luxury-29, rotating-31)
nmod:poss(apartments-33, their-32)
dobj(rotating-31, apartments-33)
case(will-35, at-34)
nmod:at(rotating-31, will-35)
case(device-40, with-36)
det(device-40, a-37)
amod(device-40, voice-activated-38)
compound(device-40, control-39)
nmod:with(will-35, device-40)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (NP (DT a) (JJ drive-in) (NN elevator))
    (VP (MD will)
      (VP (VB take)
        (NP
          (NP (PDT all) (DT the) (NNS residents))
          (CC and)
          (NP (PRP$ their) (NNS cars)))
        (PP (TO to)
          (NP (PRP$ their) (JJ own) (NNS floors)))
        (SBAR (IN so)
          (S
            (NP (PRP they))
            (VP (MD can)
              (VP (VB park)
                (ADVP (RB right))
                (PP (IN outside)
                  (NP (PRP$ their) (JJ high-rise) (NNS apartments)))))))))
    (. .)))

advmod(take-7, Moreover-1)
det(elevator-5, a-3)
amod(elevator-5, drive-in-4)
nsubj(take-7, elevator-5)
aux(take-7, will-6)
root(ROOT-0, take-7)
det:predet(residents-10, all-8)
det(residents-10, the-9)
dobj(take-7, residents-10)
cc(residents-10, and-11)
nmod:poss(cars-13, their-12)
dobj(take-7, cars-13)
conj:and(residents-10, cars-13)
case(floors-17, to-14)
nmod:poss(floors-17, their-15)
amod(floors-17, own-16)
nmod:to(take-7, floors-17)
mark(park-21, so-18)
nsubj(park-21, they-19)
aux(park-21, can-20)
advcl(take-7, park-21)
advmod(park-21, right-22)
case(apartments-26, outside-23)
nmod:poss(apartments-26, their-24)
amod(apartments-26, high-rise-25)
nmod:outside(park-21, apartments-26)

(ROOT
  (S
    (PP (IN On)
      (NP
        (NP (NN top))
        (PP (IN of)
          (NP (PRP$ its) (NN novel) (NN design)))))
    (, ,)
    (NP (DT this) (JJ futuristic) (NN edifice))
    (VP (MD will)
      (ADVP (RB also))
      (VP (VB be)
        (ADJP (JJ innovative)
          (PP (IN in)
            (NP
              (NP (DT the) (NN way))
              (SBAR
                (S
                  (NP (PRP it))
                  (VP (VBZ is)
                    (VP (VBN built)
                      (CC and)
                      (VBN powered))))))))))
    (. .)))

case(design-6, On-1)
mwe(On-1, top-2)
mwe(On-1, of-3)
nmod:poss(design-6, its-4)
compound(design-6, novel-5)
nmod:on_top_of(innovative-14, design-6)
det(edifice-10, this-8)
amod(edifice-10, futuristic-9)
nsubj(innovative-14, edifice-10)
aux(innovative-14, will-11)
advmod(innovative-14, also-12)
cop(innovative-14, be-13)
root(ROOT-0, innovative-14)
case(way-17, in-15)
det(way-17, the-16)
nmod:in(innovative-14, way-17)
nsubjpass(built-20, it-18)
nsubjpass(powered-22, it-18)
auxpass(built-20, is-19)
acl:relcl(way-17, built-20)
cc(built-20, and-21)
acl:relcl(way-17, powered-22)
conj:and(built-20, powered-22)

(ROOT
  (S
    (NP (PRP It))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP (DT the) (NN world) (POS 's))
          (JJ first)
          (ADJP (RB completely) (JJ prefabricated))
          (NN high-rise) (NN building))))
    (. .)))

nsubj(building-11, It-1)
aux(building-11, will-2)
cop(building-11, be-3)
det(world-5, the-4)
nmod:poss(building-11, world-5)
case(world-5, 's-6)
amod(building-11, first-7)
advmod(prefabricated-9, completely-8)
amod(building-11, prefabricated-9)
compound(building-11, high-rise-10)
root(ROOT-0, building-11)

(ROOT
  (S
    (NP (DT The) (NNS floors))
    (VP (MD will)
      (VP (VB hang)
        (PP (IN like)
          (NP
            (NP (NNS rings))
            (PP (IN around)
              (NP (DT an) (JJ immobile) (NN cement) (NN core)))))))
    (. .)))

det(floors-2, The-1)
nsubj(hang-4, floors-2)
aux(hang-4, will-3)
root(ROOT-0, hang-4)
case(rings-6, like-5)
nmod:like(hang-4, rings-6)
case(core-11, around-7)
det(core-11, an-8)
amod(core-11, immobile-9)
compound(core-11, cement-10)
nmod:around(rings-6, core-11)

(ROOT
  (S
    (PP (IN Except) (IN for)
      (NP
        (NP (DT the) (JJ central) (NN core))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (MD will)
              (VP (VB be)
                (VP (VBN built)
                  (PP (IN on)
                    (NP (NN site))))))))))
    (, ,)
    (NP (PDT all) (DT the) (NNS floors))
    (VP (MD will)
      (VP (VB be)
        (VP
          (VP (VBN prefabricated)
            (PP (IN in)
              (NP (DT a) (NN factory))))
          (CC and)
          (VP
            (ADVP (RB then))
            (VBN shipped)
            (PP (TO to)
              (NP (DT the) (NN site)))
            (S
              (VP (TO to)
                (VP (VB be)
                  (VP (VBN attached)
                    (PP (TO to)
                      (NP (DT the) (NN core)))))))))))
    (. .)))

case(core-5, Except-1)
mwe(Except-1, for-2)
det(core-5, the-3)
amod(core-5, central-4)
nsubjpass(built-9, core-5)
nmod:except_for(prefabricated-18, core-5)
ref(core-5, that-6)
aux(built-9, will-7)
auxpass(built-9, be-8)
acl:relcl(core-5, built-9)
case(site-11, on-10)
nmod:on(built-9, site-11)
det:predet(floors-15, all-13)
det(floors-15, the-14)
nsubjpass(prefabricated-18, floors-15)
nsubjpass(shipped-24, floors-15)
nsubjpass(attached-30, floors-15)
aux(prefabricated-18, will-16)
auxpass(prefabricated-18, be-17)
root(ROOT-0, prefabricated-18)
case(factory-21, in-19)
det(factory-21, a-20)
nmod:in(prefabricated-18, factory-21)
cc(prefabricated-18, and-22)
advmod(shipped-24, then-23)
conj:and(prefabricated-18, shipped-24)
case(site-27, to-25)
det(site-27, the-26)
nmod:to(shipped-24, site-27)
mark(attached-30, to-28)
auxpass(attached-30, be-29)
xcomp(shipped-24, attached-30)
case(core-33, to-31)
det(core-33, the-32)
nmod:to(attached-30, core-33)

(ROOT
  (S
    (S
      (NP (DT The) (NN construction) (NN process))
      (VP (MD will)
        (VP (VB start)
          (PP (IN from)
            (NP (DT the) (JJ top) (NN floor))))))
    (CC and)
    (S
      (NP (DT each) (NN level))
      (VP (MD will)
        (VP (VB be)
          (VP (VBN connected)
            (PP (TO to)
              (NP (DT the) (NN core)))
            (SBAR (IN until)
              (S
                (NP (DT the) (NN ground) (NN floor))
                (VP (VBZ is)
                  (VP (VBN completed)))))))))
    (. .)))

det(process-3, The-1)
compound(process-3, construction-2)
nsubj(start-5, process-3)
aux(start-5, will-4)
root(ROOT-0, start-5)
case(floor-9, from-6)
det(floor-9, the-7)
amod(floor-9, top-8)
nmod:from(start-5, floor-9)
cc(start-5, and-10)
det(level-12, each-11)
nsubjpass(connected-15, level-12)
aux(connected-15, will-13)
auxpass(connected-15, be-14)
conj:and(start-5, connected-15)
case(core-18, to-16)
det(core-18, the-17)
nmod:to(connected-15, core-18)
mark(completed-24, until-19)
det(floor-22, the-20)
compound(floor-22, ground-21)
nsubjpass(completed-24, floor-22)
auxpass(completed-24, is-23)
advcl(connected-15, completed-24)

(ROOT
  (S
    (SBAR
      (ADJP (JJ Time-consuming)
        (CC and)
        (JJ labor-intensive))
      (IN as)
      (S
        (NP (DT this) (NN process))
        (VP (MD may)
          (VP (VB seem)))))
    (, ,)
    (NP (DT a) (JJ mere) (CD 8) (NNS workers))
    (VP (MD will)
      (VP (VB be)
        (ADJP (JJ able)
          (S
            (VP (TO to)
              (VP (VB finish)
                (NP
                  (NP (CD one) (NN story))
                  (PP (IN in)
                    (NP
                      (NP (RB just) (DT a) (NN week))
                      (, ,)
                      (SBAR
                        (WHNP (WDT which))
                        (S
                          (VP (VBZ is)
                            (ADVP
                              (ADVP
                                (QP (JJ many) (NNS times))
                                (RBR faster))
                              (PP (IN than)
                                (NP (DT the) (NN time))))
                            (VP (VBN required)
                              (PP (IN for)
                                (NP (DT a) (JJ conventional) (NN building))))))))))))))))
    (. .)))

dep(seem-8, Time-consuming-1)
cc(Time-consuming-1, and-2)
conj:and(Time-consuming-1, labor-intensive-3)
dep(seem-8, labor-intensive-3)
mark(seem-8, as-4)
det(process-6, this-5)
nsubj(seem-8, process-6)
aux(seem-8, may-7)
advcl(able-16, seem-8)
det(workers-13, a-10)
amod(workers-13, mere-11)
nummod(workers-13, 8-12)
nsubj(able-16, workers-13)
nsubj(finish-18, workers-13)
aux(able-16, will-14)
cop(able-16, be-15)
root(ROOT-0, able-16)
mark(finish-18, to-17)
xcomp(able-16, finish-18)
nummod(story-20, one-19)
dobj(finish-18, story-20)
case(week-24, in-21)
advmod(week-24, just-22)
det(week-24, a-23)
nmod:in(story-20, week-24)
nsubjpass(required-34, week-24)
ref(week-24, which-26)
auxpass(required-34, is-27)
advmod(times-29, many-28)
dep(faster-30, times-29)
advmod(required-34, faster-30)
case(time-33, than-31)
det(time-33, the-32)
nmod:than(faster-30, time-33)
acl:relcl(week-24, required-34)
case(building-38, for-35)
det(building-38, a-36)
amod(building-38, conventional-37)
nmod:for(required-34, building-38)

(ROOT
  (S
    (SBAR
      (WHNP (WP What))
      (S
        (VP (VBZ 's)
          (ADJP (JJR more)))))
    (, ,)
    (NP
      (NP (DT the) (NN revolution))
      (PP (IN of)
        (NP (DT each) (NN floor))))
    (VP (MD will)
      (VP (VB be)
        (VP (VBN powered)
          (PP (IN by)
            (NP
              (NP (NN electricity))
              (VP (VBN generated)
                (PP (IN by)
                  (NP
                    (NP (JJ solar) (NNS panels))
                    (CC and)
                    (NP
                      (NP (JJ gigantic) (NN wind) (NNS turbines))
                      (VP (VBN positioned)
                        (PP (IN between)
                          (NP (DT each) (NN floor)))))))))))))
    (. .)))

nsubj(more-3, What-1)
cop(more-3, 's-2)
advcl(powered-12, more-3)
det(revolution-6, the-5)
nsubjpass(powered-12, revolution-6)
case(floor-9, of-7)
det(floor-9, each-8)
nmod:of(revolution-6, floor-9)
aux(powered-12, will-10)
auxpass(powered-12, be-11)
root(ROOT-0, powered-12)
case(electricity-14, by-13)
nmod:by(powered-12, electricity-14)
acl(electricity-14, generated-15)
case(panels-18, by-16)
amod(panels-18, solar-17)
nmod:by(generated-15, panels-18)
cc(panels-18, and-19)
amod(turbines-22, gigantic-20)
compound(turbines-22, wind-21)
nmod:by(generated-15, turbines-22)
conj:and(panels-18, turbines-22)
acl(turbines-22, positioned-23)
case(floor-26, between-24)
det(floor-26, each-25)
nmod:between(positioned-23, floor-26)

(ROOT
  (S
    (NP (DT The) (NN building))
    (VP
      (VP (MD will)
        (ADVP (RB thus))
        (VP (VB be)
          (ADJP (RB entirely) (JJ self-sufficient))))
      (, ,)
      (CC and)
      (VP (MD might)
        (ADVP (RB even))
        (VP (VB generate)
          (NP
            (NP (JJ excess) (NN energy))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (MD can)
                  (VP (VB be)
                    (VP (VBN sold)
                      (PP (TO to)
                        (NP (VBG neighboring) (NNS facilities))))))))))))
    (. .)))

det(building-2, The-1)
nsubj(self-sufficient-7, building-2)
nsubj(generate-12, building-2)
aux(self-sufficient-7, will-3)
advmod(self-sufficient-7, thus-4)
cop(self-sufficient-7, be-5)
advmod(self-sufficient-7, entirely-6)
root(ROOT-0, self-sufficient-7)
cc(self-sufficient-7, and-9)
aux(generate-12, might-10)
advmod(generate-12, even-11)
conj:and(self-sufficient-7, generate-12)
amod(energy-14, excess-13)
dobj(generate-12, energy-14)
nsubjpass(sold-18, energy-14)
ref(energy-14, that-15)
aux(sold-18, can-16)
auxpass(sold-18, be-17)
acl:relcl(energy-14, sold-18)
case(facilities-21, to-19)
amod(facilities-21, neighboring-20)
nmod:to(sold-18, facilities-21)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (PP (IN in)
      (NP
        (NP (NN addition))
        (PP (TO to)
          (NP (PRP$ its) (JJ revolutionary) (NN design)))))
    (, ,)
    (NP (DT the) (NNP Dynamic) (NNP Tower))
    (VP (MD will)
      (ADVP (RB also))
      (VP (VB be)
        (NP (DT a)
          (ADJP (`` ``) (NN green) ('' ''))
          (NN building))))
    (. .)))

advmod(building-20, Therefore-1)
case(design-8, in-3)
mwe(in-3, addition-4)
mwe(in-3, to-5)
nmod:poss(design-8, its-6)
amod(design-8, revolutionary-7)
nmod:in_addition_to(building-20, design-8)
det(Tower-12, the-10)
compound(Tower-12, Dynamic-11)
nsubj(building-20, Tower-12)
aux(building-20, will-13)
advmod(building-20, also-14)
cop(building-20, be-15)
det(building-20, a-16)
amod(building-20, green-18)
root(ROOT-0, building-20)

(ROOT
  (S
    (S
      (VP (VBN Recognized)
        (PP (IN by)
          (NP (JJ TIME) (NN magazine)))
        (PP (IN as)
          (NP
            (NP (CD one))
            (PP (IN of)
              (NP (DT the)
                (NP (`` ``)
                  (NP (JJS Best) (NNS Inventions))
                  (PP (IN of)
                    (NP (DT the) (NN Year)))
                  ('' ''))
                (PP (IN in)
                  (NP (CD 2)))
                (, ,)
                (NP (DT the) (NNP Dynamic) (NNP Tower))))))))
    (PRN (, ,)
      (PP (VBG according)
        (PP (TO to)
          (NP (NNP Fisher))))
      (, ,))
    (`` ``)
    (VP (MD will)
      (ADVP (RB radically))
      (VP (VB change)
        (NP (RB not)
          (ADVP (RB only))
          (NP
            (NP (DT the) (NN concept))
            (PP (IN of)
              (NP (NN design))))
          (CC but)
          (ADVP (RB also))
          (NP
            (NP (DT that))
            (PP (IN of)
              (NP (NN construction)
                (CC and)
                (JJ real) (NN estate)))))
        (, ,)
        (S
          (VP (VBG bringing)
            (NP (DT a) (JJ new) (NN dimension))
            (PP
              (PP (TO to)
                (NP (NN architecture)))
              (CC and)
              (PP (TO to)
                (NP
                  (NP (PRP$ our) (NN way))
                  (PP (IN of)
                    (NP (NN living))))))))))
    (. .) ('' '')))

csubj(change-30, Recognized-1)
case(magazine-4, by-2)
amod(magazine-4, TIME-3)
nmod:by(Recognized-1, magazine-4)
case(one-6, as-5)
nmod:as(Recognized-1, one-6)
case(Inventions-11, of-7)
det(Inventions-11, the-8)
amod(Inventions-11, Best-10)
nmod:of(one-6, Inventions-11)
case(Year-14, of-12)
det(Year-14, the-13)
nmod:of(Inventions-11, Year-14)
case(2-17, in-16)
nmod:in(Inventions-11, 2-17)
det(Tower-21, the-19)
compound(Tower-21, Dynamic-20)
appos(Inventions-11, Tower-21)
case(Fisher-25, according-23)
mwe(according-23, to-24)
dep(change-30, Fisher-25)
aux(change-30, will-28)
advmod(change-30, radically-29)
root(ROOT-0, change-30)
neg(concept-34, not-31)
advmod(concept-34, only-32)
det(concept-34, the-33)
dobj(change-30, concept-34)
case(design-36, of-35)
nmod:of(concept-34, design-36)
cc(concept-34, but-37)
advmod(that-39, also-38)
dobj(change-30, that-39)
conj:and(concept-34, that-39)
case(estate-44, of-40)
compound(estate-44, construction-41)
cc(construction-41, and-42)
conj:and(construction-41, real-43)
compound(estate-44, real-43)
nmod:of(that-39, estate-44)
advcl(change-30, bringing-46)
advcl(change-30, bringing-46')
conj:and(bringing-46, bringing-46')
det(dimension-49, a-47)
amod(dimension-49, new-48)
dobj(bringing-46, dimension-49)
case(architecture-51, to-50)
nmod:to(bringing-46, architecture-51)
cc(bringing-46, and-52)
case(way-55, to-53)
nmod:poss(way-55, our-54)
nmod:to(bringing-46', way-55)
case(living-57, of-56)
nmod:of(way-55, living-57)

(ROOT
  (S
    (SBAR (IN If)
      (S
        (NP
          (NP (DT the) (NN project))
          (PP (IN in)
            (NP (NNP Dubai))))
        (VP (VBZ goes)
          (ADVP (RB smoothly)))))
    (, ,)
    (NP (EX there))
    (VP (MD will)
      (VP (VB be)
        (NP (JJR more) (JJ revolving) (NNS towers))
        (S
          (VP (TO to)
            (VP (VB come)
              (PP (IN in)
                (NP (JJ metropolitan) (NNS areas)))
              (PP (IN around)
                (NP (DT the) (NN world))))))))
    (. .)))

mark(goes-6, If-1)
det(project-3, the-2)
nsubj(goes-6, project-3)
case(Dubai-5, in-4)
nmod:in(project-3, Dubai-5)
advcl(towers-14, goes-6)
advmod(goes-6, smoothly-7)
expl(towers-14, there-9)
aux(towers-14, will-10)
cop(towers-14, be-11)
amod(towers-14, more-12)
amod(towers-14, revolving-13)
root(ROOT-0, towers-14)
mark(come-16, to-15)
advcl(towers-14, come-16)
case(areas-19, in-17)
amod(areas-19, metropolitan-18)
nmod:in(come-16, areas-19)
case(world-22, around-20)
det(world-22, the-21)
nmod:around(come-16, world-22)

