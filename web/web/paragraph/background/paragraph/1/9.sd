(ROOT
  (S
    (PP (IN For)
      (NP
        (NP (JJ many) (NNS people))
        (PP (IN around)
          (NP (DT the) (NN world)))))
    (, ,)
    (NP
      (NP (DT the) (JJ first) (NN bicycle))
      (SBAR
        (S
          (NP (PRP they))
          (ADVP (RB ever))
          (VP (VBD rode)))))
    (VP (VBD was)
      (ADVP (RB probably))
      (NP (DT a) (JJ Giant) (NN bicycle)))
    (. .)))

case(people-3, For-1)
amod(people-3, many-2)
nmod:for(bicycle-18, people-3)
case(world-6, around-4)
det(world-6, the-5)
nmod:around(people-3, world-6)
det(bicycle-10, the-8)
amod(bicycle-10, first-9)
nsubj(bicycle-18, bicycle-10)
nsubj(rode-13, they-11)
advmod(rode-13, ever-12)
acl:relcl(bicycle-10, rode-13)
cop(bicycle-18, was-14)
advmod(bicycle-18, probably-15)
det(bicycle-18, a-16)
amod(bicycle-18, Giant-17)
root(ROOT-0, bicycle-18)

(ROOT
  (S
    (S
      (NP (DT A) (NNP Giant) (NN bicycle))
      (VP (VBZ is) (RB not)
        (NP
          (NP (DT an) (JJ oversized) (NN bike))
          (VP (VBN designed)
            (PP (IN for)
              (NP
                (ADJP (RB extremely) (JJ large))
                (NNS people)))))))
    (, ,)
    (CC but)
    (S
      (NP (DT a) (NN bike))
      (VP (VBD made)
        (PP (IN by)
          (NP
            (NP
              (NP (NNP Taiwan) (POS 's))
              (NNP Giant) (NNP Manufacturing) (NNP Co.))
            (, ,)
            (NP (NNP Ltd.))))))
    (. .)))

det(bicycle-3, A-1)
compound(bicycle-3, Giant-2)
nsubj(bike-8, bicycle-3)
cop(bike-8, is-4)
neg(bike-8, not-5)
det(bike-8, an-6)
amod(bike-8, oversized-7)
root(ROOT-0, bike-8)
acl(bike-8, designed-9)
case(people-13, for-10)
advmod(large-12, extremely-11)
amod(people-13, large-12)
nmod:for(designed-9, people-13)
cc(bike-8, but-15)
det(bike-17, a-16)
nsubj(made-18, bike-17)
conj:but(bike-8, made-18)
case(Co.-24, by-19)
nmod:poss(Co.-24, Taiwan-20)
case(Taiwan-20, 's-21)
compound(Co.-24, Giant-22)
compound(Co.-24, Manufacturing-23)
nmod:by(made-18, Co.-24)
appos(Co.-24, Ltd.-26)

(ROOT
  (S
    (S
      (NP (EX There))
      (VP (VBZ is)
        (NP (DT a) (NN saying))))
    (, ,) (`` ``)
    (S
      (SBAR (IN Once)
        (S
          (NP (PRP you))
          (VP (VBP learn)
            (SBAR
              (WHADVP (WRB how))
              (S
                (VP (TO to)
                  (VP (VB ride)
                    (NP (DT a) (NN bike)))))))))
      (, ,)
      (NP (PRP you))
      (ADVP (RB never))
      (VP (VBP forget)))
    (. .) ('' '')))

expl(is-2, There-1)
root(ROOT-0, is-2)
det(saying-4, a-3)
nsubj(is-2, saying-4)
mark(learn-9, Once-7)
nsubj(learn-9, you-8)
advcl(forget-18, learn-9)
advmod(ride-12, how-10)
mark(ride-12, to-11)
ccomp(learn-9, ride-12)
det(bike-14, a-13)
dobj(ride-12, bike-14)
nsubj(forget-18, you-16)
neg(forget-18, never-17)
parataxis(is-2, forget-18)

(ROOT
  (S
    (NP (NNP Company) (NN chairperson) (NNP King) (NNP Liu))
    (VP (VBZ has)
      (ADVP (RB never))
      (VP (VBN forgotten)
        (SBAR
          (WHADVP (WRB how))
          (S
            (VP (TO to)
              (VP (VB ride)
                (NP (DT a) (NN bike))))))))
    (. !)))

compound(Liu-4, Company-1)
compound(Liu-4, chairperson-2)
compound(Liu-4, King-3)
nsubj(forgotten-7, Liu-4)
aux(forgotten-7, has-5)
neg(forgotten-7, never-6)
root(ROOT-0, forgotten-7)
advmod(ride-10, how-8)
mark(ride-10, to-9)
ccomp(forgotten-7, ride-10)
det(bike-12, a-11)
dobj(ride-10, bike-12)

(ROOT
  (S
    (PP (IN At)
      (NP
        (NP (DT the) (NN age))
        (PP (IN of)
          (NP (NN seventy-three)))))
    (, ,)
    (NP (NNP Mr.) (NNP Liu))
    (VP (VBD circled)
      (NP
        (NP (NNP Taiwan))
        (PP (IN on)
          (NP
            (NP (DT a) (JJ 1-day) (NN journey))
            (VP (VBN called)
              (S (`` ``)
                (NP (NNP Ride) (NNP Life))))))))
    (. .) ('' '')))

case(age-3, At-1)
det(age-3, the-2)
nmod:at(circled-9, age-3)
case(seventy-three-5, of-4)
nmod:of(age-3, seventy-three-5)
compound(Liu-8, Mr.-7)
nsubj(circled-9, Liu-8)
root(ROOT-0, circled-9)
dobj(circled-9, Taiwan-10)
case(journey-14, on-11)
det(journey-14, a-12)
amod(journey-14, 1-day-13)
nmod:on(Taiwan-10, journey-14)
acl(journey-14, called-15)
compound(Life-18, Ride-17)
xcomp(called-15, Life-18)

(ROOT
  (S
    (NP (PRP He))
    (VP (VBD experienced)
      (NP
        (NP
          (NP (NNP Taiwan) (POS 's))
          (NN culture) (, ,) (NN food))
        (, ,)
        (CC and)
        (NP
          (NP (NNS people))
          (PP (IN along)
            (NP (DT the) (NN way)))))
      (PP (IN on)
        (NP (PRP$ his) (NN bicycle))))
    (. .)))

nsubj(experienced-2, He-1)
root(ROOT-0, experienced-2)
nmod:poss(food-7, Taiwan-3)
case(Taiwan-3, 's-4)
compound(food-7, culture-5)
dobj(experienced-2, food-7)
cc(food-7, and-9)
dobj(experienced-2, people-10)
conj:and(food-7, people-10)
case(way-13, along-11)
det(way-13, the-12)
nmod:along(people-10, way-13)
case(bicycle-16, on-14)
nmod:poss(bicycle-16, his-15)
nmod:on(experienced-2, bicycle-16)

(ROOT
  (S (`` ``)
    (S
      (S
        (NP (NNP Driving))
        (VP (VBZ is)
          (ADJP (RB too) (JJ quick))))
      (: ;)
      (S
        (NP (PRP it))
        (VP (VBZ does) (RB n't)
          (VP (VB allow)
            (S
              (NP (PRP you))
              (VP (TO to)
                (VP (VB see)
                  (NP (NN anything)))))))))
    (, ,) ('' '')
    (NP (NNP Liu))
    (VP (VBD said))
    (. .)))

nsubj(quick-5, Driving-2)
cop(quick-5, is-3)
advmod(quick-5, too-4)
ccomp(said-18, quick-5)
nsubj(allow-10, it-7)
aux(allow-10, does-8)
neg(allow-10, n't-9)
parataxis(quick-5, allow-10)
dobj(allow-10, you-11)
nsubj(see-13, you-11)
mark(see-13, to-12)
xcomp(allow-10, see-13)
dobj(see-13, anything-14)
nsubj(said-18, Liu-17)
root(ROOT-0, said-18)

(ROOT
  (S (`` ``)
    (CC And)
    (NP (NN walking))
    (VP (VBZ is)
      (ADJP (RB too) (JJ slow)))
    (. .)))

cc(slow-6, And-2)
nsubj(slow-6, walking-3)
cop(slow-6, is-4)
advmod(slow-6, too-5)
root(ROOT-0, slow-6)

(ROOT
  (S
    (ADVP (RB Indeed))
    (, ,)
    (NP (NN cycling))
    (VP (VBZ is)
      (NP
        (NP (DT the) (JJS best) (NN way))
        (SBAR
          (S
            (VP (TO to)
              (VP (VB experience)
                (NP
                  (NP (DT the) (NN beauty))
                  (PP (IN of)
                    (NP (DT the) (NN island))))))))))
    (. .) ('' '')))

advmod(way-7, Indeed-1)
nsubj(way-7, cycling-3)
cop(way-7, is-4)
det(way-7, the-5)
amod(way-7, best-6)
root(ROOT-0, way-7)
mark(experience-9, to-8)
acl(way-7, experience-9)
det(beauty-11, the-10)
dobj(experience-9, beauty-11)
case(island-14, of-12)
det(island-14, the-13)
nmod:of(beauty-11, island-14)

(ROOT
  (S
    (NP (NNP Liu))
    (VP (VBD encouraged)
      (NP (NNS people))
      (S
        (VP (TO to)
          (VP (VB experience)
            (NP (DT a) (`` ``) (JJ Ride) (NN Life) ('' ''))
            (SBAR (IN as)
              (S
                (NP (PRP he))
                (VP (VBD did))))))))
    (. .)))

nsubj(encouraged-2, Liu-1)
root(ROOT-0, encouraged-2)
dobj(encouraged-2, people-3)
nsubj(experience-5, people-3)
mark(experience-5, to-4)
xcomp(encouraged-2, experience-5)
det(Life-9, a-6)
amod(Life-9, Ride-8)
dobj(experience-5, Life-9)
mark(did-13, as-11)
nsubj(did-13, he-12)
advcl(experience-5, did-13)

(ROOT
  (S (`` ``)
    (S
      (NP (NNP Life))
      (VP (VBZ is)
        (ADJP (RBR more) (JJ exciting))
        (SBAR (IN if)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN experienced)
                (PP (IN on)
                  (NP (DT a) (NN bicycle)))))))))
    (, ,) ('' '')
    (NP (PRP he))
    (VP (VBD said))
    (. .)))

nsubj(exciting-5, Life-2)
cop(exciting-5, is-3)
advmod(exciting-5, more-4)
ccomp(said-16, exciting-5)
mark(experienced-9, if-6)
nsubjpass(experienced-9, it-7)
auxpass(experienced-9, is-8)
advcl(exciting-5, experienced-9)
case(bicycle-12, on-10)
det(bicycle-12, a-11)
nmod:on(experienced-9, bicycle-12)
nsubj(said-16, he-15)
root(ROOT-0, said-16)

(ROOT
  (S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (NNP Giant))
        (VP (VBD started)
          (NP (NN business))
          (PP (IN over)
            (ADVP
              (NP (CD thirty) (NNS years))
              (RB ago))))))
    (, ,)
    (NP (NNS bicycles))
    (VP (VBD were)
      (VP (VBN used)
        (ADVP (RB mainly))
        (PP (IN for)
          (NP (NN transportation)))))
    (. .)))

advmod(started-3, When-1)
nsubj(started-3, Giant-2)
advcl(used-12, started-3)
dobj(started-3, business-4)
case(ago-8, over-5)
nummod(years-7, thirty-6)
nmod:npmod(ago-8, years-7)
advcl:over(started-3, ago-8)
nsubjpass(used-12, bicycles-10)
auxpass(used-12, were-11)
root(ROOT-0, used-12)
advmod(used-12, mainly-13)
case(transportation-15, for-14)
nmod:for(used-12, transportation-15)

(ROOT
  (S
    (PP (IN Through)
      (NP (DT the) (NNS years)))
    (, ,)
    (ADVP (RB however))
    (, ,)
    (NP (NNP Giant))
    (VP (VBZ has)
      (VP (VBN made)
        (NP (DT a) (JJ great) (NN effort))
        (S
          (VP (TO to)
            (VP (VB promote)
              (NP
                (NP (DT the) (NN concept))
                (PP (IN of) (`` ``)
                  (NP (NNP Ride) (NNP Life)))))))))
    (. .) ('' '')))

case(years-3, Through-1)
det(years-3, the-2)
nmod:through(made-9, years-3)
advmod(made-9, however-5)
nsubj(made-9, Giant-7)
aux(made-9, has-8)
root(ROOT-0, made-9)
det(effort-12, a-10)
amod(effort-12, great-11)
dobj(made-9, effort-12)
mark(promote-14, to-13)
advcl(made-9, promote-14)
det(concept-16, the-15)
dobj(promote-14, concept-16)
case(Life-20, of-17)
compound(Life-20, Ride-19)
nmod:of(concept-16, Life-20)

(ROOT
  (S
    (PP (IN In)
      (NP (DT this) (NN effort)))
    (, ,)
    (NP (NNP Giant))
    (VP (VBZ has)
      (VP (VBN set)
        (PRT (RP up))
        (NP
          (NP (NN bicycle) (NN rental) (NNS services))
          (PP (IN in)
            (NP (DT some) (JJ big) (NNS cities))))))
    (. .)))

case(effort-3, In-1)
det(effort-3, this-2)
nmod:in(set-7, effort-3)
nsubj(set-7, Giant-5)
aux(set-7, has-6)
root(ROOT-0, set-7)
compound:prt(set-7, up-8)
compound(services-11, bicycle-9)
compound(services-11, rental-10)
dobj(set-7, services-11)
case(cities-15, in-12)
det(cities-15, some-13)
amod(cities-15, big-14)
nmod:in(services-11, cities-15)

(ROOT
  (S
    (NP (DT This))
    (VP (VBZ helps)
      (VP (VB spread)
        (NP
          (NP (DT the) (NN popularity))
          (PP (IN of)
            (NP (NN cycling))))
        (PP (IN as)
          (NP (DT a) (NN leisure) (NN activity)))))
    (. .)))

nsubj(helps-2, This-1)
root(ROOT-0, helps-2)
xcomp(helps-2, spread-3)
det(popularity-5, the-4)
dobj(spread-3, popularity-5)
case(cycling-7, of-6)
nmod:of(popularity-5, cycling-7)
case(activity-11, as-8)
det(activity-11, a-9)
compound(activity-11, leisure-10)
nmod:as(spread-3, activity-11)

(ROOT
  (S
    (PP (IN As)
      (NP (DT a) (NN result)))
    (, ,)
    (NP
      (NP
        (ADJP (JJR more)
          (CC and)
          (JJR more))
        (NNS people))
      (PP (IN in)
        (NP (NNP Taiwan))))
    (VP (VBP are)
      (ADVP (RB now))
      (VP (VBG seeking)
        (NP (DT a) (JJ healthier) (NN lifestyle))
        (PP (IN through)
          (NP (NN cycling)))))
    (. .)))

case(result-3, As-1)
det(result-3, a-2)
nmod:as(seeking-13, result-3)
amod(people-8, more-5)
cc(more-5, and-6)
conj:and(more-5, more-7)
amod(people-8, more-7)
nsubj(seeking-13, people-8)
case(Taiwan-10, in-9)
nmod:in(people-8, Taiwan-10)
aux(seeking-13, are-11)
advmod(seeking-13, now-12)
root(ROOT-0, seeking-13)
det(lifestyle-16, a-14)
amod(lifestyle-16, healthier-15)
dobj(seeking-13, lifestyle-16)
case(cycling-18, through-17)
nmod:through(seeking-13, cycling-18)

(ROOT
  (S
    (NP (NNP Giant))
    (VP (VBZ is)
      (ADJP (RB quite) (JJ different)
        (PP (IN from)
          (NP (JJ other) (NNS companies)))))
    (. .)))

nsubj(different-4, Giant-1)
cop(different-4, is-2)
advmod(different-4, quite-3)
root(ROOT-0, different-4)
case(companies-7, from-5)
amod(companies-7, other-6)
nmod:from(different-4, companies-7)

(ROOT
  (S
    (ADVP
      (NP (NNS Years))
      (RB ago))
    (, ,)
    (NP (JJ many) (NNS companies))
    (VP
      (VP (VBD gave)
        (PRT (RP up)))
      (CC or)
      (VP (VBD changed)
        (PRT (RP over))
        (PP (TO to)
          (S
            (VP (VBG making)
              (NP (JJ other) (NNS products)))))))
    (. .)))

nmod:npmod(ago-2, Years-1)
advmod(gave-6, ago-2)
amod(companies-5, many-4)
nsubj(gave-6, companies-5)
nsubj(changed-9, companies-5)
root(ROOT-0, gave-6)
compound:prt(gave-6, up-7)
cc(gave-6, or-8)
conj:or(gave-6, changed-9)
compound:prt(changed-9, over-10)
mark(making-12, to-11)
advcl(changed-9, making-12)
amod(products-14, other-13)
dobj(making-12, products-14)

(ROOT
  (S (CC But)
    (NP (NNP Giant))
    (VP (VBD stayed)
      (PP (IN with)
        (SBAR
          (WHNP (WP what))
          (S
            (NP (PRP they))
            (VP (VBD believed)
              (NP (NNS in-bicycles)))))))
    (. .)))

cc(stayed-3, But-1)
nsubj(stayed-3, Giant-2)
root(ROOT-0, stayed-3)
mark(believed-7, with-4)
dobj(believed-7, what-5)
nsubj(believed-7, they-6)
advcl(stayed-3, believed-7)
dobj(believed-7, in-bicycles-8)

(ROOT
  (S
    (ADVP (RB Now))
    (NP (NNP Giant))
    (VP (VBZ is)
      (NP
        (NP (CD one))
        (PP (IN of)
          (NP
            (NP (DT the)
              (ADJP (JJS largest)
                (CC and)
                (ADJP (RBS most) (JJ successful)))
              (NN bike) (NNS producers))
            (PP (IN in)
              (NP (DT the) (NN world)))))))
    (. .)))

advmod(one-4, Now-1)
nsubj(one-4, Giant-2)
cop(one-4, is-3)
root(ROOT-0, one-4)
case(producers-12, of-5)
det(producers-12, the-6)
amod(producers-12, largest-7)
cc(largest-7, and-8)
advmod(successful-10, most-9)
conj:and(largest-7, successful-10)
amod(producers-12, successful-10)
compound(producers-12, bike-11)
nmod:of(one-4, producers-12)
case(world-15, in-13)
det(world-15, the-14)
nmod:in(producers-12, world-15)

(ROOT
  (S (CC But)
    (NP (PRP$ its) (NNS officials))
    (VP (VBP are)
      (ADJP (RB not) (VBN satisfied)
        (WHPP (IN with)
          (WHNP (WDT that)))))
    (. .)))

cc(satisfied-6, But-1)
nmod:poss(officials-3, its-2)
nsubjpass(satisfied-6, officials-3)
auxpass(satisfied-6, are-4)
neg(satisfied-6, not-5)
root(ROOT-0, satisfied-6)
case(that-8, with-7)
nmod:with(satisfied-6, that-8)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP want)
      (S
        (NP (NNS people))
        (VP (TO to)
          (VP (VB protect)
            (NP (DT the) (NN environment))
            (PP (IN by)
              (S
                (VP (VBG driving)
                  (NP (JJR less)))))))))
    (. .)))

nsubj(want-2, They-1)
root(ROOT-0, want-2)
dobj(want-2, people-3)
nsubj(protect-5, people-3)
mark(protect-5, to-4)
xcomp(want-2, protect-5)
det(environment-7, the-6)
dobj(protect-5, environment-7)
mark(driving-9, by-8)
advcl(protect-5, driving-9)
dobj(driving-9, less-10)

(ROOT
  (S
    (NP (PRP They))
    (ADVP (RB also))
    (VP (VBP hope)
      (SBAR (IN that)
        (S
          (NP (NN everyone))
          (VP (MD can)
            (VP (VB experience)
              (NP (NN life))
              (PP (IN in)
                (NP
                  (NP (DT a) (NN fun))
                  (CC and)
                  (NP (JJ healthy) (NN way)))))))))
    (. .)))

nsubj(hope-3, They-1)
advmod(hope-3, also-2)
root(ROOT-0, hope-3)
mark(experience-7, that-4)
nsubj(experience-7, everyone-5)
aux(experience-7, can-6)
ccomp(hope-3, experience-7)
dobj(experience-7, life-8)
case(fun-11, in-9)
det(fun-11, a-10)
nmod:in(experience-7, fun-11)
cc(fun-11, and-12)
amod(way-14, healthy-13)
nmod:in(experience-7, way-14)
conj:and(fun-11, way-14)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (NP (DT no) (NN wonder))
      (SBAR (IN that)
        (S
          (NP (NNP Giant))
          (VP (VBZ deserves)
            (S
              (VP (TO to)
                (VP (VB be)
                  (NP
                    (NP (DT a) (NN giant))
                    (PP (IN in)
                      (NP (DT the) (NN bicycle) (NN world)))))))))))
    (. !)))

nsubj(wonder-4, It-1)
cop(wonder-4, is-2)
neg(wonder-4, no-3)
root(ROOT-0, wonder-4)
mark(deserves-7, that-5)
nsubj(deserves-7, Giant-6)
nsubj(giant-11, Giant-6)
ccomp(wonder-4, deserves-7)
mark(giant-11, to-8)
cop(giant-11, be-9)
det(giant-11, a-10)
xcomp(deserves-7, giant-11)
case(world-15, in-12)
det(world-15, the-13)
compound(world-15, bicycle-14)
nmod:in(giant-11, world-15)

