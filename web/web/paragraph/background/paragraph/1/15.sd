(ROOT
  (S
    (NP (JJ Global) (NN warming))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN issue))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBZ is)
              (VP (VBG being)
                (VP (VBN discussed)
                  (ADVP (RB everywhere)))))))))
    (. .)))

amod(warming-2, Global-1)
nsubj(issue-5, warming-2)
cop(issue-5, is-3)
det(issue-5, an-4)
root(ROOT-0, issue-5)
nsubjpass(discussed-9, issue-5)
ref(issue-5, that-6)
aux(discussed-9, is-7)
auxpass(discussed-9, being-8)
acl:relcl(issue-5, discussed-9)
advmod(discussed-9, everywhere-10)

(ROOT
  (S
    (NP (PRP We))
    (VP (VBP have)
      (VP (VBN learned)
        (S
          (VP (TO to)
            (VP (VB help)
              (VP (VB solve)
                (NP (DT the) (NN problem))
                (PP (IN by)
                  (NP (VBG saving) (NN energy)
                    (CC and)
                    (VBG recycling) (NNS resources)))))))))
    (. .)))

nsubj(learned-3, We-1)
nsubj(help-5, We-1)
aux(learned-3, have-2)
root(ROOT-0, learned-3)
mark(help-5, to-4)
xcomp(learned-3, help-5)
xcomp(help-5, solve-6)
det(problem-8, the-7)
dobj(solve-6, problem-8)
case(energy-11, by-9)
amod(energy-11, saving-10)
nmod:by(solve-6, energy-11)
cc(energy-11, and-12)
amod(resources-14, recycling-13)
nmod:by(solve-6, resources-14)
conj:and(energy-11, resources-14)

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (PRP we))
    (VP (MD may) (RB not)
      (VP (VB be)
        (ADJP (JJ aware))
        (SBAR (IN that)
          (S
            (S
              (VP (VBG changing)
                (NP (PRP$ our) (NN diet))))
            (VP (MD can)
              (ADVP (RB also))
              (VP (VB help)
                (VP (VB stop)
                  (NP (JJ global) (NN warming)))))))))
    (. .)))

advmod(aware-7, However-1)
nsubj(aware-7, we-3)
aux(aware-7, may-4)
neg(aware-7, not-5)
cop(aware-7, be-6)
root(ROOT-0, aware-7)
mark(help-14, that-8)
csubj(help-14, changing-9)
nmod:poss(diet-11, our-10)
dobj(changing-9, diet-11)
aux(help-14, can-12)
advmod(help-14, also-13)
ccomp(aware-7, help-14)
xcomp(help-14, stop-15)
amod(warming-17, global-16)
dobj(stop-15, warming-17)

(ROOT
  (S
    (PP (IN For)
      (NP (DT a) (NN start)))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (ADVP (RB simply))
      (VP (VB choose)
        (S
          (VP (TO to)
            (VP (VB eat)
              (NP
                (NP (JJR more) (NNS vegetables))
                (CC and)
                (NP (JJR less) (NN meat))))))))
    (. .)))

case(start-3, For-1)
det(start-3, a-2)
nmod:for(choose-8, start-3)
nsubj(choose-8, we-5)
nsubj(eat-10, we-5)
aux(choose-8, can-6)
advmod(choose-8, simply-7)
root(ROOT-0, choose-8)
mark(eat-10, to-9)
xcomp(choose-8, eat-10)
amod(vegetables-12, more-11)
dobj(eat-10, vegetables-12)
cc(vegetables-12, and-13)
amod(meat-15, less-14)
dobj(eat-10, meat-15)
conj:and(vegetables-12, meat-15)

(ROOT
  (S
    (PP (VBG According)
      (PP (TO to)
        (NP
          (NP (DT a) (NN study))
          (PP (IN of)
            (NP
              (NP (NN consumer) (NN behavior))
              (PP (IN in)
                (NP (DT the) (NNP U.S.))))))))
    (, ,)
    (NP (NN meat) (NN consumption))
    (VP (VBZ is)
      (NP
        (NP (CD one))
        (PP (IN of)
          (NP
            (NP (DT the) (JJ major) (NNS causes))
            (PP (IN of)
              (NP
                (NP (NN damage))
                (PP (TO to)
                  (NP (DT the) (NN environment)))))))))
    (. .)))

case(study-4, According-1)
mwe(According-1, to-2)
det(study-4, a-3)
nmod:according_to(one-15, study-4)
case(behavior-7, of-5)
compound(behavior-7, consumer-6)
nmod:of(study-4, behavior-7)
case(U.S.-10, in-8)
det(U.S.-10, the-9)
nmod:in(behavior-7, U.S.-10)
compound(consumption-13, meat-12)
nsubj(one-15, consumption-13)
cop(one-15, is-14)
root(ROOT-0, one-15)
case(causes-19, of-16)
det(causes-19, the-17)
amod(causes-19, major-18)
nmod:of(one-15, causes-19)
case(damage-21, of-20)
nmod:of(causes-19, damage-21)
case(environment-24, to-22)
det(environment-24, the-23)
nmod:to(damage-21, environment-24)

(ROOT
  (S
    (PP (IN For)
      (NP (CD one) (NN thing)))
    (, ,)
    (NP
      (NP (DT all) (NN farm) (NNS animals))
      (, ,)
      (PP (JJ such) (IN as)
        (NP (NNS cows)
          (CC and)
          (NNS pigs)))
      (, ,))
    (VP (VBP release)
      (NP (NN methane))
      (PP (IN from)
        (NP (PRP$ their) (NNS bodies))))
    (. .)))

case(thing-3, For-1)
nummod(thing-3, one-2)
nmod:for(release-15, thing-3)
det(animals-7, all-5)
compound(animals-7, farm-6)
nsubj(release-15, animals-7)
case(cows-11, such-9)
mwe(such-9, as-10)
nmod:such_as(animals-7, cows-11)
cc(cows-11, and-12)
nmod:such_as(animals-7, pigs-13)
conj:and(cows-11, pigs-13)
root(ROOT-0, release-15)
dobj(release-15, methane-16)
case(bodies-19, from-17)
nmod:poss(bodies-19, their-18)
nmod:from(release-15, bodies-19)

(ROOT
  (S
    (S
      (NP (CD One) (NN cow))
      (VP (MD can)
        (VP (VB produce)
          (PRT (RP up))
          (PP (TO to)
            (NP
              (NP (CD 6) (NNS liters))
              (PP (IN of)
                (NP
                  (NP (NN methane))
                  (NP (DT each) (NN day)))))))))
    (, ,)
    (CC and)
    (S
      (NP (NN methane))
      (VP (VBZ is)
        (NP
          (NP (DT the) (JJ second)
            (ADJP (RBS most) (JJ common))
            (NN greenhouse) (NN gas))
          (PP (IN after)
            (NP (NN carbon) (NN dioxide))))))
    (. .)))

nummod(cow-2, One-1)
nsubj(produce-4, cow-2)
aux(produce-4, can-3)
root(ROOT-0, produce-4)
compound:prt(produce-4, up-5)
case(liters-8, to-6)
nummod(liters-8, 6-7)
nmod:to(produce-4, liters-8)
case(methane-10, of-9)
nmod:of(liters-8, methane-10)
det(day-12, each-11)
dep(methane-10, day-12)
cc(produce-4, and-14)
nsubj(gas-22, methane-15)
cop(gas-22, is-16)
det(gas-22, the-17)
amod(gas-22, second-18)
advmod(common-20, most-19)
amod(gas-22, common-20)
compound(gas-22, greenhouse-21)
conj:and(produce-4, gas-22)
case(dioxide-25, after-23)
compound(dioxide-25, carbon-24)
nmod:after(gas-22, dioxide-25)

(ROOT
  (S
    (NP (JJ Many) (JJ environmental) (NNS experts))
    (ADVP (RB now))
    (VP (VBP believe)
      (SBAR (IN that)
        (S
          (NP (NN methane))
          (VP (VBZ is)
            (ADJP
              (ADJP (RB even) (RBR more) (JJ responsible))
              (PP (IN for)
                (NP
                  (NP (JJ global) (NN warming))
                  (PP (IN than)
                    (NP (NN carbon) (NN dioxide))))))))))
    (. .)))

amod(experts-3, Many-1)
amod(experts-3, environmental-2)
nsubj(believe-5, experts-3)
advmod(believe-5, now-4)
root(ROOT-0, believe-5)
mark(responsible-11, that-6)
nsubj(responsible-11, methane-7)
cop(responsible-11, is-8)
advmod(responsible-11, even-9)
advmod(responsible-11, more-10)
ccomp(believe-5, responsible-11)
case(warming-14, for-12)
amod(warming-14, global-13)
nmod:for(responsible-11, warming-14)
case(dioxide-17, than-15)
compound(dioxide-17, carbon-16)
nmod:than(warming-14, dioxide-17)

(ROOT
  (S
    (PP (IN For)
      (NP (DT another) (NN thing)))
    (, ,)
    (NP (NN meat) (NN production))
    (VP (VBZ affects)
      (NP (DT the) (NN environment))
      (PP (IN through)
        (NP
          (NP (DT the) (NN use))
          (PP (IN of)
            (NP (NN water)
              (CC and)
              (NN land))))))
    (. .)))

case(thing-3, For-1)
det(thing-3, another-2)
nmod:for(affects-7, thing-3)
compound(production-6, meat-5)
nsubj(affects-7, production-6)
root(ROOT-0, affects-7)
det(environment-9, the-8)
dobj(affects-7, environment-9)
case(use-12, through-10)
det(use-12, the-11)
nmod:through(affects-7, use-12)
case(water-14, of-13)
nmod:of(use-12, water-14)
cc(water-14, and-15)
nmod:of(use-12, land-16)
conj:and(water-14, land-16)

(ROOT
  (S
    (VP (VB Look)
      (PP (IN at)
        (NP (DT the) (NNS charts)))
      (ADVP (RB below)))
    (. .)))

root(ROOT-0, Look-1)
case(charts-4, at-2)
det(charts-4, the-3)
nmod:at(Look-1, charts-4)
advmod(Look-1, below-5)

(ROOT
  (S
    (NP
      (NP (DT The) (NN amount))
      (PP (IN of)
        (NP (NN water)
          (CC and)
          (NN land)))
      (VP (VBN used)
        (S
          (VP (TO to)
            (VP (VB produce)
              (NP (NN meat)))))))
    (VP (VBZ is)
      (ADJP
        (NP
          (QP (JJ many) (NNS times)))
        (RB as) (JJ much))
      (SBAR (IN as)
        (S
          (NP (DT that))
          (VP (VBD used)
            (S
              (VP (TO to)
                (VP (VB grow)
                  (NP (NNS crops)))))))))
    (. .)))

det(amount-2, The-1)
nsubj(much-15, amount-2)
case(water-4, of-3)
nmod:of(amount-2, water-4)
cc(water-4, and-5)
nmod:of(amount-2, land-6)
conj:and(water-4, land-6)
acl(amount-2, used-7)
mark(produce-9, to-8)
xcomp(used-7, produce-9)
dobj(produce-9, meat-10)
cop(much-15, is-11)
advmod(times-13, many-12)
dep(much-15, times-13)
advmod(much-15, as-14)
root(ROOT-0, much-15)
mark(used-18, as-16)
nsubj(used-18, that-17)
nsubj(grow-20, that-17)
advcl(much-15, used-18)
mark(grow-20, to-19)
xcomp(used-18, grow-20)
dobj(grow-20, crops-21)

(ROOT
  (S
    (ADVP (RB Obviously))
    (, ,)
    (NP (DT a) (NN vegetarian) (NN diet))
    (VP (MD can)
      (VP (VB benefit)
        (NP
          (CONJP (RB not) (JJ only))
          (NP (PRP$ our) (NN health))
          (CONJP (CC but)
            (RB also))
          (NP (PRP$ our) (NN environment)))))
    (. .)))

advmod(benefit-7, Obviously-1)
det(diet-5, a-3)
compound(diet-5, vegetarian-4)
nsubj(benefit-7, diet-5)
aux(benefit-7, can-6)
root(ROOT-0, benefit-7)
neg(only-9, not-8)
cc:preconj(health-11, only-9)
nmod:poss(health-11, our-10)
dobj(benefit-7, health-11)
cc(health-11, but-12)
advmod(environment-15, also-13)
nmod:poss(environment-15, our-14)
dobj(benefit-7, environment-15)
conj:and(health-11, environment-15)

(ROOT
  (S
    (PP (IN In)
      (NP (NN addition)))
    (, ,)
    (NP
      (NP (NN food))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBZ travels)
            (NP (DT a) (JJ long) (NN distance))
            (PP (TO to)
              (NP (DT the) (NN market)))))))
    (VP (VBZ is) (RB not)
      (ADJP (JJ friendly)
        (PP (TO to)
          (NP (DT the) (NN environment)))))
    (. .)))

case(addition-2, In-1)
nmod:in(friendly-15, addition-2)
nsubj(travels-6, food-4)
nsubj(friendly-15, food-4)
ref(food-4, that-5)
acl:relcl(food-4, travels-6)
det(distance-9, a-7)
amod(distance-9, long-8)
dobj(travels-6, distance-9)
case(market-12, to-10)
det(market-12, the-11)
nmod:to(travels-6, market-12)
cop(friendly-15, is-13)
neg(friendly-15, not-14)
root(ROOT-0, friendly-15)
case(environment-18, to-16)
det(environment-18, the-17)
nmod:to(friendly-15, environment-18)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (NP (DT some) (NNS people))
    (VP (VBP are)
      (ADVP (RB now))
      (VP (VBG promoting)
        (NP
          (NP (DT the) (NN idea))
          (PP (IN of)
            (S
              (VP (VBG eating)
                (NP (JJ local) (NNS foods))))))))
    (. .)))

advmod(promoting-7, Therefore-1)
det(people-4, some-3)
nsubj(promoting-7, people-4)
aux(promoting-7, are-5)
advmod(promoting-7, now-6)
root(ROOT-0, promoting-7)
det(idea-9, the-8)
dobj(promoting-7, idea-9)
mark(eating-11, of-10)
acl(idea-9, eating-11)
amod(foods-13, local-12)
dobj(eating-11, foods-13)

(ROOT
  (S
    (S
      (NP (PRP We))
      (VP (MD may)
        (VP (VB count)
          (SBAR
            (WHNP
              (WHADJP (WRB how) (JJ many))
              (NNS calories))
            (S
              (NP (PRP$ our) (NN food))
              (VP (VBZ contains)))))))
    (, ,)
    (CC but)
    (S
      (NP (PRP we))
      (ADVP (RB rarely))
      (VP (VBP count)
        (SBAR
          (WHNP
            (WHADJP (WRB how) (JJ many))
            (NNS miles))
          (S
            (NP (DT the) (NN food))
            (VP (VBZ has)
              (VP (VBN traveled)
                (SBAR (IN before)
                  (S
                    (NP (PRP it))
                    (VP (VBZ reaches)
                      (NP (PRP$ our) (NN table)))))))))))
    (. .)))

nsubj(count-3, We-1)
aux(count-3, may-2)
root(ROOT-0, count-3)
advmod(many-5, how-4)
amod(calories-6, many-5)
dobj(contains-9, calories-6)
nmod:poss(food-8, our-7)
nsubj(contains-9, food-8)
ccomp(count-3, contains-9)
cc(count-3, but-11)
nsubj(count-14, we-12)
advmod(count-14, rarely-13)
conj:but(count-3, count-14)
advmod(many-16, how-15)
amod(miles-17, many-16)
dobj(traveled-21, miles-17)
det(food-19, the-18)
nsubj(traveled-21, food-19)
aux(traveled-21, has-20)
ccomp(count-14, traveled-21)
mark(reaches-24, before-22)
nsubj(reaches-24, it-23)
advcl(traveled-21, reaches-24)
nmod:poss(table-26, our-25)
dobj(reaches-24, table-26)

(ROOT
  (S
    (PP (IN For)
      (NP (NN example)))
    (, ,)
    (NP (NNP California) (NNS grapes))
    (VP (VBP travel)
      (NP
        (NP
          (QP (JJR more) (IN than) (CD 1)))
        (, ,)
        (NP
          (NP (NNS kilometers))
          (PP (TO to)
            (NP
              (NP (NNP Taiwan))
              (, ,)
              (CC and)
              (NP
                (NP (NNP Fuji) (NNS apples))
                (PP (IN over)
                  (NP (CD 2))))
              (, ,))))))
    (. .)))

case(example-2, For-1)
nmod:for(travel-6, example-2)
compound(grapes-5, California-4)
nsubj(travel-6, grapes-5)
root(ROOT-0, travel-6)
advmod(1-9, more-7)
mwe(more-7, than-8)
dobj(travel-6, 1-9)
appos(1-9, kilometers-11)
case(Taiwan-13, to-12)
nmod:to(kilometers-11, Taiwan-13)
cc(Taiwan-13, and-15)
compound(apples-17, Fuji-16)
nmod:to(kilometers-11, apples-17)
conj:and(Taiwan-13, apples-17)
case(2-19, over-18)
nmod:over(apples-17, 2-19)

(ROOT
  (S
    (NP
      (NP (DT This) (JJ long-distance) (NN transportation))
      (PP (IN by)
        (NP
          (NP (NN truck))
          (, ,)
          (NP (NN ship))
          (, ,)
          (CC or)
          (NP (NN plane)))))
    (VP (VBZ means)
      (NP
        (NP (JJR more) (NN consumption))
        (PP (IN of)
          (NP (NN oil)))))
    (. .)))

det(transportation-3, This-1)
amod(transportation-3, long-distance-2)
nsubj(means-11, transportation-3)
case(truck-5, by-4)
nmod:by(transportation-3, truck-5)
nmod:by(transportation-3, ship-7)
conj:or(truck-5, ship-7)
cc(truck-5, or-9)
nmod:by(transportation-3, plane-10)
conj:or(truck-5, plane-10)
root(ROOT-0, means-11)
amod(consumption-13, more-12)
dobj(means-11, consumption-13)
case(oil-15, of-14)
nmod:of(consumption-13, oil-15)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (SBAR (IN if)
      (S
        (NP (PRP we))
        (VP (VBP eat)
          (NP (JJR more) (JJ local) (NNS foods)))))
    (, ,)
    (NP (PRP we))
    (VP (MD can)
      (VP (VB reduce)
        (NP
          (NP (DT the) (NN amount))
          (PP (IN of)
            (NP (NN greenhouse) (NN gas)))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP produce)))))))
    (. .)))

advmod(reduce-12, Thus-1)
mark(eat-5, if-3)
nsubj(eat-5, we-4)
advcl(reduce-12, eat-5)
amod(foods-8, more-6)
amod(foods-8, local-7)
dobj(eat-5, foods-8)
nsubj(reduce-12, we-10)
aux(reduce-12, can-11)
root(ROOT-0, reduce-12)
det(amount-14, the-13)
dobj(reduce-12, amount-14)
case(gas-17, of-15)
compound(gas-17, greenhouse-16)
nmod:of(amount-14, gas-17)
nsubj(produce-19, we-18)
acl:relcl(amount-14, produce-19)

(ROOT
  (S
    (PP (IN Like)
      (S
        (VP (VBG eating)
          (NP (JJ local) (NNS foods)))))
    (, ,)
    (NP (JJ eating) (JJ seasonal) (NNS foods))
    (VP (VBZ is)
      (ADVP (RB also))
      (NP (DT a) (JJ good) (NN way)
        (S
          (VP (TO to)
            (VP (VB lower)
              (NP (DT the) (NN burden))
              (PP (IN on)
                (NP (PRP$ our) (NN environment))))))))
    (. .)))

mark(eating-2, Like-1)
advcl(way-13, eating-2)
amod(foods-4, local-3)
dobj(eating-2, foods-4)
amod(foods-8, eating-6)
amod(foods-8, seasonal-7)
nsubj(way-13, foods-8)
cop(way-13, is-9)
advmod(way-13, also-10)
det(way-13, a-11)
amod(way-13, good-12)
root(ROOT-0, way-13)
mark(lower-15, to-14)
acl(way-13, lower-15)
det(burden-17, the-16)
dobj(lower-15, burden-17)
case(environment-20, on-18)
nmod:poss(environment-20, our-19)
nmod:on(lower-15, environment-20)

(ROOT
  (S
    (NP
      (NP (NNS Fruits)
        (CC and)
        (NNS vegetables))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBP are) (RB not)
            (PP (IN in)
              (NP (NN season)))))))
    (VP (VBP need)
      (NP (JJR more) (NN fertilizer)
        (S
          (VP (TO to)
            (VP (VB grow)
              (NP
                (QP (CC and)
                  (JJR more))
                (NN electricity))
              (PP (TO to)
                (NP (NN store))))))))
    (. .)))

nsubj(season-8, Fruits-1)
nsubj(need-9, Fruits-1)
cc(Fruits-1, and-2)
conj:and(Fruits-1, vegetables-3)
nsubj(season-8, vegetables-3)
nsubj(need-9, vegetables-3)
ref(Fruits-1, that-4)
cop(season-8, are-5)
neg(season-8, not-6)
case(season-8, in-7)
acl:relcl(Fruits-1, season-8)
root(ROOT-0, need-9)
amod(fertilizer-11, more-10)
dobj(need-9, fertilizer-11)
mark(grow-13, to-12)
acl(fertilizer-11, grow-13)
cc(more-15, and-14)
nummod(electricity-16, more-15)
dobj(grow-13, electricity-16)
case(store-18, to-17)
nmod:to(grow-13, store-18)

(ROOT
  (S
    (ADVP (RB Therefore))
    (, ,)
    (NP (JJ out-of-season) (NNS foods))
    (VP (VBP are)
      (ADVP (RB usually))
      (ADJP (RBR more) (JJ expensive)))
    (. .)))

advmod(expensive-8, Therefore-1)
amod(foods-4, out-of-season-3)
nsubj(expensive-8, foods-4)
cop(expensive-8, are-5)
advmod(expensive-8, usually-6)
advmod(expensive-8, more-7)
root(ROOT-0, expensive-8)

(ROOT
  (S
    (NP
      (NP (NNP Smart) (NNS consumers))
      (, ,)
      (ADJP (RB especially) (JJ housewives))
      (, ,))
    (VP (MD should)
      (VP (VB make)
        (NP
          (ADJP (JJR better)
            (CC and)
            (JJR wiser))
          (NNS choices))))
    (. .)))

compound(consumers-2, Smart-1)
nsubj(make-8, consumers-2)
advmod(housewives-5, especially-4)
amod(consumers-2, housewives-5)
aux(make-8, should-7)
root(ROOT-0, make-8)
amod(choices-12, better-9)
cc(better-9, and-10)
conj:and(better-9, wiser-11)
amod(choices-12, wiser-11)
dobj(make-8, choices-12)

(ROOT
  (S
    (NP
      (NP (PRP$ Our) (NN choice))
      (PP (IN of)
        (NP (NN food))))
    (ADVP (RB obviously))
    (VP (VBZ has)
      (NP
        (NP (DT a) (JJ serious) (NN influence))
        (PP (IN on)
          (NP
            (NP (PRP$ our) (JJ whole) (NN planet))
            (, ,)
            (SBAR
              (WHADVP (RB especially) (WRB when))
              (S
                (NP (PRP$ its) (JJ limited) (NNS resources))
                (VP (VBP are)
                  (ADJP (RB nearly) (VBN used)
                    (PRT (RP up))))))))))
    (. .)))

nmod:poss(choice-2, Our-1)
nsubj(has-6, choice-2)
case(food-4, of-3)
nmod:of(choice-2, food-4)
advmod(has-6, obviously-5)
root(ROOT-0, has-6)
det(influence-9, a-7)
amod(influence-9, serious-8)
dobj(has-6, influence-9)
case(planet-13, on-10)
nmod:poss(planet-13, our-11)
amod(planet-13, whole-12)
nmod:on(influence-9, planet-13)
advmod(when-16, especially-15)
advmod(used-22, when-16)
nmod:poss(resources-19, its-17)
amod(resources-19, limited-18)
nsubjpass(used-22, resources-19)
auxpass(used-22, are-20)
advmod(used-22, nearly-21)
acl:relcl(planet-13, used-22)
dep(used-22, up-23)

(ROOT
  (S
    (ADVP (IN So)
      (PP
        (PP (IN for)
          (NP (PRP ourselves)))
        (, ,)
        (CC and)
        (PP (IN for)
          (NP
            (NP (DT a) (JJR better) (NN environment))
            (PP (IN for)
              (NP (PRP$ our) (JJ future) (NNS generations)))))))
    (, ,)
    (NP (NNP let) (POS 's))
    (VP (VBP start)
      (S
        (VP (TO to)
          (VP (VB change)
            (NP (PRP$ our) (JJ eating) (NNS habits))))))
    (. .)))

conj:and(So-1, So-1')
advmod(start-17, So-1)
advmod(start-17, So-1')
case(ourselves-3, for-2)
nmod:for(So-1, ourselves-3)
cc(So-1, and-5)
case(environment-9, for-6)
det(environment-9, a-7)
amod(environment-9, better-8)
nmod:for(So-1', environment-9)
case(generations-13, for-10)
nmod:poss(generations-13, our-11)
amod(generations-13, future-12)
nmod:for(environment-9, generations-13)
nsubj(start-17, let-15)
nsubj(change-19, let-15)
case(let-15, 's-16)
root(ROOT-0, start-17)
mark(change-19, to-18)
xcomp(start-17, change-19)
nmod:poss(habits-22, our-20)
amod(habits-22, eating-21)
dobj(change-19, habits-22)

