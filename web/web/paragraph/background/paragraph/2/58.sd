(ROOT
  (NP
    (NP (DT The) (JJ Future) (NN Body))
    (NP (NNP Network))
    (. .)))

det(Body-3, The-1)
amod(Body-3, Future-2)
root(ROOT-0, Body-3)
appos(Body-3, Network-4)

(ROOT
  (SQ (VBP Are)
    (NP (PRP you))
    (ADJP (JJ tired)
      (PP (IN of)
        (NP
          (NP (NNS cables))
          (SBAR
            (WHNP (WDT that))
            (S
              (VP
                (VP (VB spread)
                  (NP
                    (NP (DT all))
                    (PP (IN over)
                      (NP (PRP$ your) (NN desk)))))
                (CC and)
                (VP (VB make)
                  (NP (PRP$ your) (NNP Coke) (NN tumble))
                  (PRT (RP over))
                  (PP (IN onto)
                    (NP (PRP$ your) (NN keyboard))))))))))
    (. ?)))

cop(tired-3, Are-1)
nsubj(tired-3, you-2)
root(ROOT-0, tired-3)
case(cables-5, of-4)
nmod:of(tired-3, cables-5)
nsubj(spread-7, cables-5)
nsubj(make-13, cables-5)
ref(cables-5, that-6)
acl:relcl(cables-5, spread-7)
dobj(spread-7, all-8)
case(desk-11, over-9)
nmod:poss(desk-11, your-10)
nmod:over(all-8, desk-11)
cc(spread-7, and-12)
acl:relcl(cables-5, make-13)
conj:and(spread-7, make-13)
nmod:poss(tumble-16, your-14)
compound(tumble-16, Coke-15)
dobj(make-13, tumble-16)
compound:prt(make-13, over-17)
case(keyboard-20, onto-18)
nmod:poss(keyboard-20, your-19)
nmod:onto(make-13, keyboard-20)

(ROOT
  (S
    (SBAR (IN If)
      (FRAG
        (ADVP (RB so))))
    (, ,)
    (NP (PRP you))
    (VP (MD may)
      (VP (VB consider)
        (S
          (VP (VBG using)
            (NP
              (NP (NNS devices))
              (SBAR
                (WHNP (WDT that))
                (S
                  (VP (VBP use)
                    (NP
                      (NP (NNS technologies))
                      (PP (IN like)
                        (NP (NNP Wi-Fi)
                          (CC or)
                          (NNP Bluetooth))))))))))))
    (. .)))

mark(so-2, If-1)
advcl(consider-6, so-2)
nsubj(consider-6, you-4)
aux(consider-6, may-5)
root(ROOT-0, consider-6)
xcomp(consider-6, using-7)
dobj(using-7, devices-8)
nsubj(use-10, devices-8)
ref(devices-8, that-9)
acl:relcl(devices-8, use-10)
dobj(use-10, technologies-11)
case(Wi-Fi-13, like-12)
nmod:like(technologies-11, Wi-Fi-13)
cc(Wi-Fi-13, or-14)
nmod:like(technologies-11, Bluetooth-15)
conj:or(Wi-Fi-13, Bluetooth-15)

(ROOT
  (S
    (NP
      (NP (DT Neither))
      (PP (IN of)
        (NP (PRP them))))
    (VP (VBZ sends)
      (NP (NNS data))
      (PP (IN through)
        (NP (NNS cables))))
    (. .)))

nsubj(sends-4, Neither-1)
case(them-3, of-2)
nmod:of(Neither-1, them-3)
root(ROOT-0, sends-4)
dobj(sends-4, data-5)
case(cables-7, through-6)
nmod:through(sends-4, cables-7)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ sounds)
      (ADJP (JJ perfect))
      (, ,)
      (S
        (VP (VB doesnt)
          (NP (PRP it)))))
    (. ?)))

nsubj(sounds-2, It-1)
root(ROOT-0, sounds-2)
xcomp(sounds-2, perfect-3)
ccomp(sounds-2, doesnt-5)
dobj(doesnt-5, it-6)

(ROOT
  (S (CC But)
    (NP (DT this))
    (VP (VBZ is) (RB not)
      (NP
        (NP (DT the) (NN end))
        (PP (IN of)
          (NP (DT the) (NN story)))))
    (. .)))

cc(end-6, But-1)
nsubj(end-6, this-2)
cop(end-6, is-3)
neg(end-6, not-4)
det(end-6, the-5)
root(ROOT-0, end-6)
case(story-9, of-7)
det(story-9, the-8)
nmod:of(end-6, story-9)

(ROOT
  (S
    (NP (NNS Scientists))
    (VP (VBP are)
      (ADVP (RB now))
      (VP (VBG trying)
        (S
          (VP (TO to)
            (VP (VB use)
              (NP (DT the) (JJ human) (NN body))
              (S
                (VP (TO to)
                  (VP (VB do)
                    (NP (DT a) (JJ similar) (NN job))))))))))
    (. .)))

nsubj(trying-4, Scientists-1)
nsubj(use-6, Scientists-1)
aux(trying-4, are-2)
advmod(trying-4, now-3)
root(ROOT-0, trying-4)
mark(use-6, to-5)
xcomp(trying-4, use-6)
det(body-9, the-7)
amod(body-9, human-8)
dobj(use-6, body-9)
mark(do-11, to-10)
advcl(use-6, do-11)
det(job-14, a-12)
amod(job-14, similar-13)
dobj(do-11, job-14)

(ROOT
  (S
    (NP (PRP They))
    (VP (VBP have)
      (VP (VBN come)
        (PRT (RP up))
        (PP (IN with)
          (NP
            (NP (DT the) (NN idea))
            (PP (IN of)
              (S
                (VP (VBG sending)
                  (NP (NNS data))
                  (PP (IN over)
                    (NP
                      (NP (DT the) (JJ small) (JJ electric) (NN field))
                      (PP (IN on)
                        (NP
                          (NP (DT the) (NN surface))
                          (PP (IN of)
                            (NP (DT the) (NN skin))))))))))))))
    (. .)))

nsubj(come-3, They-1)
aux(come-3, have-2)
root(ROOT-0, come-3)
compound:prt(come-3, up-4)
case(idea-7, with-5)
det(idea-7, the-6)
nmod:with(come-3, idea-7)
mark(sending-9, of-8)
acl(idea-7, sending-9)
dobj(sending-9, data-10)
case(field-15, over-11)
det(field-15, the-12)
amod(field-15, small-13)
amod(field-15, electric-14)
nmod:over(sending-9, field-15)
case(surface-18, on-16)
det(surface-18, the-17)
nmod:on(field-15, surface-18)
case(skin-21, of-19)
det(skin-21, the-20)
nmod:of(surface-18, skin-21)

(ROOT
  (S
    (S
      (VP (TO To)
        (VP (VB do)
          (NP (DT this)))))
    (, ,)
    (NP (DT a) (NN transmitter))
    (VP (MD could)
      (VP (VB be)
        (VP (VBN built)
          (PP (IN into)
            (NP
              (NP (PRP$ your) (NN pocket))
              (CC or)
              (NP (DT a) (JJ portable) (NN device))))
          (PP (IN like)
            (NP (DT an) (NNP MP) (NN player))))))
    (. .)))

mark(do-2, To-1)
advcl(built-9, do-2)
dobj(do-2, this-3)
det(transmitter-6, a-5)
nsubjpass(built-9, transmitter-6)
aux(built-9, could-7)
auxpass(built-9, be-8)
root(ROOT-0, built-9)
case(pocket-12, into-10)
nmod:poss(pocket-12, your-11)
nmod:into(built-9, pocket-12)
cc(pocket-12, or-13)
det(device-16, a-14)
amod(device-16, portable-15)
nmod:into(built-9, device-16)
conj:or(pocket-12, device-16)
case(player-20, like-17)
det(player-20, an-18)
compound(player-20, MP-19)
nmod:like(built-9, player-20)

(ROOT
  (S
    (NP (DT This) (NN transmitter))
    (VP (MD would) (RB then)
      (VP (VB use)
        (NP (PRP$ your) (JJ skins) (JJ electrical) (NN field))
        (S
          (VP (TO to)
            (VP (VB send)
              (NP (NNS data))
              (PP (TO to)
                (NP (DT a) (NN receiving) (NN device))))))))
    (. .)))

det(transmitter-2, This-1)
nsubj(use-5, transmitter-2)
aux(use-5, would-3)
advmod(use-5, then-4)
root(ROOT-0, use-5)
nmod:poss(field-9, your-6)
amod(field-9, skins-7)
amod(field-9, electrical-8)
dobj(use-5, field-9)
mark(send-11, to-10)
advcl(use-5, send-11)
dobj(send-11, data-12)
case(device-16, to-13)
det(device-16, a-14)
compound(device-16, receiving-15)
nmod:to(send-11, device-16)

(ROOT
  (S
    (SBAR (IN Since)
      (S
        (NP
          (NP (DT this) (NN kind))
          (PP (IN of)
            (NP (NN transmission))))
        (VP (VBZ has)
          (NP
            (NP (DT a) (NN range))
            (PP (IN of)
              (NP (RB only) (CD twenty) (NNS centimeters)))))))
    (, ,)
    (NP (DT the) (NN receiver))
    (VP (MD would)
      (VP (VB have)
        (S
          (VP (TO to)
            (VP (VB be)
              (ADJP (JJ close)
                (PP (TO to)
                  (NP
                    (NP (DT some) (NN part))
                    (PP (IN of)
                      (NP (PRP$ your) (NN body)))))))))))
    (. .)))

mark(has-6, Since-1)
det(kind-3, this-2)
nsubj(has-6, kind-3)
case(transmission-5, of-4)
nmod:of(kind-3, transmission-5)
advcl(have-17, has-6)
det(range-8, a-7)
dobj(has-6, range-8)
case(centimeters-12, of-9)
advmod(centimeters-12, only-10)
nummod(centimeters-12, twenty-11)
nmod:of(range-8, centimeters-12)
det(receiver-15, the-14)
nsubj(have-17, receiver-15)
nsubj(part-23, receiver-15)
aux(have-17, would-16)
root(ROOT-0, have-17)
mark(part-23, to-18)
cop(part-23, be-19)
case(part-23, close-20)
mwe(close-20, to-21)
det(part-23, some-22)
xcomp(have-17, part-23)
case(body-26, of-24)
nmod:poss(body-26, your-25)
nmod:of(part-23, body-26)

(ROOT
  (S
    (PP (IN By)
      (S
        (VP (VBG using)
          (NP (DT this) (NN body) (NN network)))))
    (, ,)
    (NP (PRP you))
    (VP (VBP wouldnt)
      (VP (VB need)
        (NP (DT a) (NN cable)
          (S
            (VP
              (VP (TO to)
                (VP (VB link)
                  (NP (PRP$ your) (NNP MP) (NN player))
                  (PP (IN in)
                    (NP (PRP$ your) (NN pocket)))
                  (PP (TO to)
                    (NP
                      (NP (DT the) (NNS headphones))
                      (PP (IN in)
                        (NP (PRP$ your) (NNS ears)))))))
              (, ,)
              (CC or)
              (VP (TO to)
                (VP (VB send)
                  (PP (TO to)
                    (NP (PRP$ your) (NN computer)))
                  (NP
                    (NP (DT the) (NNS pictures))
                    (PP (IN from)
                      (NP
                        (NP (DT a) (JJ digital) (NN camera))
                        (VP (VBG hanging)
                          (PP (IN around)
                            (NP (PRP$ your) (NN neck))))))))))))))
    (. .)))

mark(using-2, By-1)
advcl(wouldnt-8, using-2)
det(network-5, this-3)
compound(network-5, body-4)
dobj(using-2, network-5)
nsubj(wouldnt-8, you-7)
root(ROOT-0, wouldnt-8)
xcomp(wouldnt-8, need-9)
det(cable-11, a-10)
dobj(need-9, cable-11)
mark(link-13, to-12)
dep(cable-11, link-13)
nmod:poss(player-16, your-14)
compound(player-16, MP-15)
dobj(link-13, player-16)
case(pocket-19, in-17)
nmod:poss(pocket-19, your-18)
nmod:in(link-13, pocket-19)
case(headphones-22, to-20)
det(headphones-22, the-21)
nmod:to(link-13, headphones-22)
case(ears-25, in-23)
nmod:poss(ears-25, your-24)
nmod:in(headphones-22, ears-25)
cc(link-13, or-27)
mark(send-29, to-28)
dep(cable-11, send-29)
conj:or(link-13, send-29)
case(computer-32, to-30)
nmod:poss(computer-32, your-31)
nmod:to(send-29, computer-32)
det(pictures-34, the-33)
dobj(send-29, pictures-34)
case(camera-38, from-35)
det(camera-38, a-36)
amod(camera-38, digital-37)
nmod:from(pictures-34, camera-38)
acl(camera-38, hanging-39)
case(neck-42, around-40)
nmod:poss(neck-42, your-41)
nmod:around(hanging-39, neck-42)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (VP
        (VP (VB exchange)
          (NP (JJ electronic) (NNS cards))
          (PP (IN with)
            (NP (NNS others)))
          (PP (IN by)
            (NP (VBG shaking) (NNS hands))))
        (, ,)
        (VP (VB trade)
          (NP (NN music) (NNS files))
          (PP (IN by)
            (S
              (VP (VBG dancing)
                (NP (NN cheek))
                (PP (TO to)
                  (NP (NN cheek)))))))
        (, ,)
        (CC or)
        (VP (VB swap)
          (NP (NN phone) (NNS numbers))
          (PP (RB just) (IN by)
            (S
              (VP (VBG kissing)))))))
    (. .)))

advmod(exchange-5, Moreover-1)
nsubj(exchange-5, you-3)
nsubj(trade-14, you-3)
nsubj(swap-24, you-3)
aux(exchange-5, can-4)
root(ROOT-0, exchange-5)
amod(cards-7, electronic-6)
dobj(exchange-5, cards-7)
case(others-9, with-8)
nmod:with(exchange-5, others-9)
case(hands-12, by-10)
amod(hands-12, shaking-11)
nmod:by(exchange-5, hands-12)
conj:or(exchange-5, trade-14)
compound(files-16, music-15)
dobj(trade-14, files-16)
mark(dancing-18, by-17)
advcl(trade-14, dancing-18)
dobj(dancing-18, cheek-19)
case(cheek-21, to-20)
nmod:to(dancing-18, cheek-21)
cc(exchange-5, or-23)
conj:or(exchange-5, swap-24)
compound(numbers-26, phone-25)
dobj(swap-24, numbers-26)
advmod(kissing-29, just-27)
mark(kissing-29, by-28)
advcl(swap-24, kissing-29)

(ROOT
  (S
    (ADVP (RB Now))
    (, ,)
    (ADVP (RB here))
    (VP (VBZ comes)
      (NP (DT a) (NN question)))
    (. .)))

advmod(comes-4, Now-1)
advmod(comes-4, here-3)
root(ROOT-0, comes-4)
det(question-6, a-5)
dobj(comes-4, question-6)

(ROOT
  (SBARQ
    (WHADVP (WRB Why))
    (SQ (MD would)
      (NP (NN anyone))
      (VP (VB bother)
        (NP (NN networking))
        (PP (IN through)
          (NP (PRP$ their) (NN body)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (NNP Wi-Fi)
              (CC and)
              (NNP Bluetooth))
            (ADVP (RB already))
            (VP (VBP exist))))))
    (. ?)))

advmod(bother-4, Why-1)
aux(bother-4, would-2)
nsubj(bother-4, anyone-3)
root(ROOT-0, bother-4)
dobj(bother-4, networking-5)
case(body-8, through-6)
nmod:poss(body-8, their-7)
nmod:through(bother-4, body-8)
advmod(exist-14, when-9)
nsubj(exist-14, Wi-Fi-10)
cc(Wi-Fi-10, and-11)
conj:and(Wi-Fi-10, Bluetooth-12)
nsubj(exist-14, Bluetooth-12)
advmod(exist-14, already-13)
advcl(bother-4, exist-14)

(ROOT
  (S
    (NP (DT The) (NN answer))
    (VP (VBZ lies)
      (PP (IN in)
        (NP (DT the) (NN fact)))
      (SBAR (IN that)
        (S
          (PP (IN with)
            (NP (NNP Wi-Fi)
              (CC or)
              (NNP Bluetooth)))
          (, ,)
          (NP (PRP it))
          (VP (VBZ is)
            (ADJP (JJ hard)
              (S
                (VP (TO to)
                  (VP (VB limit)
                    (NP (DT the) (NNS signals))
                    (ADVP (RB only))
                    (PP (TO to)
                      (NP (PRP$ your) (JJ own) (NN use)))))))))))
    (. .)))

det(answer-2, The-1)
nsubj(lies-3, answer-2)
root(ROOT-0, lies-3)
case(fact-6, in-4)
det(fact-6, the-5)
nmod:in(lies-3, fact-6)
mark(hard-15, that-7)
case(Wi-Fi-9, with-8)
nmod:with(hard-15, Wi-Fi-9)
cc(Wi-Fi-9, or-10)
conj:or(Wi-Fi-9, Bluetooth-11)
nmod:with(hard-15, Bluetooth-11)
nsubj(hard-15, it-13)
nsubj(limit-17, it-13)
cop(hard-15, is-14)
ccomp(lies-3, hard-15)
mark(limit-17, to-16)
xcomp(hard-15, limit-17)
det(signals-19, the-18)
dobj(limit-17, signals-19)
advmod(limit-17, only-20)
case(use-24, to-21)
nmod:poss(use-24, your-22)
amod(use-24, own-23)
nmod:to(limit-17, use-24)

(ROOT
  (S
    (PP (IN In)
      (NP (DT a) (JJ busy) (NN place)))
    (, ,)
    (NP (PRP you))
    (VP (MD can)
      (ADVP (RB never))
      (VP (VB know)
        (SBAR
          (WHNP (WP who))
          (S
            (VP (MD might)
              (VP (VB steal)
                (NP (PRP$ your) (NN information))))))))
    (. .)))

case(place-4, In-1)
det(place-4, a-2)
amod(place-4, busy-3)
nmod:in(know-9, place-4)
nsubj(know-9, you-6)
aux(know-9, can-7)
neg(know-9, never-8)
root(ROOT-0, know-9)
nsubj(steal-12, who-10)
aux(steal-12, might-11)
ccomp(know-9, steal-12)
nmod:poss(information-14, your-13)
dobj(steal-12, information-14)

(ROOT
  (S
    (PP (IN In)
      (NP (NN contrast)))
    (, ,)
    (NP (NN body) (NN networking))
    (VP (VBZ is)
      (ADJP (JJR safer)))
    (. .)))

case(contrast-2, In-1)
nmod:in(safer-7, contrast-2)
compound(networking-5, body-4)
nsubj(safer-7, networking-5)
cop(safer-7, is-6)
root(ROOT-0, safer-7)

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ is)
      (ADJP (JJ hard)
        (PP (IN for)
          (NP (JJ other) (NNS people))))
      (S
        (VP (TO to)
          (VP (VB pick)
            (PRT (RP up))
            (NP
              (NP (NNS signals))
              (VP (VBN sent)
                (PP (IN over)
                  (NP
                    (NP (DT the) (NN surface))
                    (PP (IN of)
                      (NP (PRP$ your) (NN skin))))))))))
      (SBAR (IN since)
        (S
          (NP (DT this) (NN body) (NN network))
          (ADVP (RB only))
          (VP (VBZ extends)
            (NP (CD twenty) (NNS centimeters))
            (PP (IN from)
              (NP (PRP$ your) (NN body)))))))
    (. .)))

nsubj(hard-3, It-1)
nsubj(pick-8, It-1)
cop(hard-3, is-2)
root(ROOT-0, hard-3)
case(people-6, for-4)
amod(people-6, other-5)
nmod:for(hard-3, people-6)
mark(pick-8, to-7)
xcomp(hard-3, pick-8)
compound:prt(pick-8, up-9)
dobj(pick-8, signals-10)
acl(signals-10, sent-11)
case(surface-14, over-12)
det(surface-14, the-13)
nmod:over(sent-11, surface-14)
case(skin-17, of-15)
nmod:poss(skin-17, your-16)
nmod:of(surface-14, skin-17)
mark(extends-23, since-18)
det(network-21, this-19)
compound(network-21, body-20)
nsubj(extends-23, network-21)
advmod(extends-23, only-22)
advcl(hard-3, extends-23)
nummod(centimeters-25, twenty-24)
dobj(extends-23, centimeters-25)
case(body-28, from-26)
nmod:poss(body-28, your-27)
nmod:from(extends-23, body-28)

(ROOT
  (S
    (ADVP (RB Thus))
    (, ,)
    (NP (DT no) (NN one) (RB else))
    (VP (MD can)
      (ADVP (RB easily))
      (VP
        (VP (VB pick)
          (PRT (RP up)))
        (CC and)
        (VP (VB interpret)
          (NP (PRP$ your) (NNS signals)))))
    (. .)))

advmod(pick-8, Thus-1)
neg(one-4, no-3)
nsubj(pick-8, one-4)
nsubj(interpret-11, one-4)
advmod(one-4, else-5)
aux(pick-8, can-6)
advmod(pick-8, easily-7)
root(ROOT-0, pick-8)
compound:prt(pick-8, up-9)
cc(pick-8, and-10)
conj:and(pick-8, interpret-11)
nmod:poss(signals-13, your-12)
dobj(interpret-11, signals-13)

(ROOT
  (S
    (ADVP (RB Moreover))
    (, ,)
    (NP
      (NP (DT the)
        (ADJP (RBS most) (JJ important))
        (NN use))
      (PP (IN of)
        (NP
          (NP (NN body) (NN networking))
          (PP (IN in)
            (NP (DT the) (NN future))))))
    (VP (MD may)
      (ADVP (RB well))
      (VP (VB be)
        (VP (VBN communication)
          (PP
            (PP (IN within)
              (NP (DT the) (NN body)))
            (CONJP (RB rather) (IN than))
            (PP
              (ADVP (RB just))
              (IN on)
              (NP (PRP$ its) (NN surface)))))))
    (. .)))

advmod(communication-16, Moreover-1)
det(use-6, the-3)
advmod(important-5, most-4)
amod(use-6, important-5)
nsubjpass(communication-16, use-6)
nsubjpass(communication-16', use-6)
case(networking-9, of-7)
compound(networking-9, body-8)
nmod:of(use-6, networking-9)
case(future-12, in-10)
det(future-12, the-11)
nmod:in(networking-9, future-12)
aux(communication-16, may-13)
advmod(communication-16, well-14)
auxpass(communication-16, be-15)
root(ROOT-0, communication-16)
conj:negcc(communication-16, communication-16')
case(body-19, within-17)
det(body-19, the-18)
nmod:within(communication-16, body-19)
cc(communication-16, rather-20)
mwe(rather-20, than-21)
advmod(surface-25, just-22)
case(surface-25, on-23)
nmod:poss(surface-25, its-24)
nmod:on(communication-16', surface-25)

(ROOT
  (S
    (VP (VB Imagine)
      (S
        (VP
          (VP (VBG having)
            (NP
              (NP (DT a) (NN number))
              (PP (IN of)
                (NP
                  (NP (JJ small) (NNS devices))
                  (VP (VBN implanted)
                    (PP (IN under)
                      (NP (PRP$ your) (NN skin))))))))
          (CC and)
          (VP (VBG using)
            (S
              (NP (PRP them))
              (VP (TO to)
                (VP (VB control)
                  (NP (PRP$ your) (JJ own) (JJ nervous) (NN system)))))))))
    (. .)))

root(ROOT-0, Imagine-1)
ccomp(Imagine-1, having-2)
det(number-4, a-3)
dobj(having-2, number-4)
case(devices-7, of-5)
amod(devices-7, small-6)
nmod:of(number-4, devices-7)
acl(devices-7, implanted-8)
case(skin-11, under-9)
nmod:poss(skin-11, your-10)
nmod:under(implanted-8, skin-11)
cc(having-2, and-12)
ccomp(Imagine-1, using-13)
conj:and(having-2, using-13)
dobj(using-13, them-14)
nsubj(control-16, them-14)
mark(control-16, to-15)
xcomp(using-13, control-16)
nmod:poss(system-20, your-17)
amod(system-20, own-18)
amod(system-20, nervous-19)
dobj(control-16, system-20)

(ROOT
  (S
    (PP (IN In)
      (NP (JJ other) (NNS words)))
    (, ,)
    (VP (VB imagine)
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (VBP possess)
            (CC and)
            (VBP control)
            (NP (DT a) (JJ powerful) (JJ in-body) (NN computer))))))
    (. .)))

case(words-3, In-1)
amod(words-3, other-2)
nmod:in(imagine-5, words-3)
root(ROOT-0, imagine-5)
mark(possess-8, that-6)
nsubj(possess-8, you-7)
nsubj(control-10, you-7)
ccomp(imagine-5, possess-8)
cc(possess-8, and-9)
ccomp(imagine-5, control-10)
conj:and(possess-8, control-10)
det(computer-14, a-11)
amod(computer-14, powerful-12)
amod(computer-14, in-body-13)
dobj(possess-8, computer-14)

(ROOT
  (SBARQ
    (WHNP (WP What))
    (SQ (VBP do)
      (NP (PRP you))
      (VP (VB think)
        (PP (IN of)
          (NP (DT this) (NN idea)))))
    (. ?)))

dobj(think-4, What-1)
aux(think-4, do-2)
nsubj(think-4, you-3)
root(ROOT-0, think-4)
case(idea-7, of-5)
det(idea-7, this-6)
nmod:of(think-4, idea-7)

(ROOT
  (SQ (NNP Does)
    (NP (PRP it))
    (VP (VB sound)
      (ADJP (JJ cool))
      (, ,)
      (PP (IN like)
        (S
          (VP (VBG being)
            (NP
              (NP (DT a) (NN character))
              (PP (IN in)
                (NP (DT the) (NN movie) (NN RoboCop))))))))
    (. ?)))

dep(sound-3, Does-1)
nsubj(sound-3, it-2)
root(ROOT-0, sound-3)
xcomp(sound-3, cool-4)
mark(character-9, like-6)
cop(character-9, being-7)
det(character-9, a-8)
advcl(sound-3, character-9)
case(RoboCop-13, in-10)
det(RoboCop-13, the-11)
compound(RoboCop-13, movie-12)
nmod:in(character-9, RoboCop-13)

(ROOT
  (SQ (CC Or)
    (MD would)
    (NP (PRP you))
    (VP (VB prefer)
      (S
        (VP (TO to)
          (VP (VB be)
            (NP (RB just) (DT a) (JJ normal) (JJ human) (NN being))))))
    (. ?)))

cc(prefer-4, Or-1)
aux(prefer-4, would-2)
nsubj(prefer-4, you-3)
nsubj(being-11, you-3)
root(ROOT-0, prefer-4)
mark(being-11, to-5)
cop(being-11, be-6)
advmod(being-11, just-7)
det(being-11, a-8)
amod(being-11, normal-9)
amod(being-11, human-10)
xcomp(prefer-4, being-11)

(ROOT
  (PRN (: --)
    (PP (IN by)
      (NP
        (NP (NNP Eugene))
        (VP (VBN Oxford))))))

case(Eugene-3, by-2)
root(ROOT-0, Eugene-3)
acl(Eugene-3, Oxford-4)

